//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\MyProjectsCSharp\LangParse2\Java.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LangParse2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class JavaParser : Parser {
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, IntegerLiteral=51, FloatingPointLiteral=52, BooleanLiteral=53, 
		CharacterLiteral=54, StringLiteral=55, NullLiteral=56, LPAREN=57, RPAREN=58, 
		LBRACE=59, RBRACE=60, LBRACK=61, RBRACK=62, SEMI=63, COMMA=64, DOT=65, 
		ASSIGN=66, GT=67, LT=68, BANG=69, TILDE=70, QUESTION=71, COLON=72, EQUAL=73, 
		LE=74, GE=75, NOTEQUAL=76, AND=77, OR=78, INC=79, DEC=80, ADD=81, SUB=82, 
		MUL=83, DIV=84, BITAND=85, BITOR=86, CARET=87, MOD=88, ADD_ASSIGN=89, 
		SUB_ASSIGN=90, MUL_ASSIGN=91, DIV_ASSIGN=92, AND_ASSIGN=93, OR_ASSIGN=94, 
		XOR_ASSIGN=95, MOD_ASSIGN=96, LSHIFT_ASSIGN=97, RSHIFT_ASSIGN=98, URSHIFT_ASSIGN=99, 
		Identifier=100, AT=101, ELLIPSIS=102, WS=103, COMMENT=104, LINE_COMMENT=105;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", 
		"'case'", "'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", "IntegerLiteral", 
		"FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
		"'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
		"'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", 
		"'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", 
		"'|'", "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
		"'%='", "'<<='", "'>>='", "'>>>='", "Identifier", "'@'", "'...'", "WS", 
		"COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, 
		RULE_typeDeclaration = 3, RULE_modifier = 4, RULE_classOrInterfaceModifier = 5, 
		RULE_variableModifier = 6, RULE_classDeclaration = 7, RULE_typeParameters = 8, 
		RULE_typeParameter = 9, RULE_typeBound = 10, RULE_enumDeclaration = 11, 
		RULE_enumConstants = 12, RULE_enumConstant = 13, RULE_enumBodyDeclarations = 14, 
		RULE_interfaceDeclaration = 15, RULE_typeList = 16, RULE_classBody = 17, 
		RULE_interfaceBody = 18, RULE_classBodyDeclaration = 19, RULE_memberDeclaration = 20, 
		RULE_methodDeclaration = 21, RULE_genericMethodDeclaration = 22, RULE_constructorDeclaration = 23, 
		RULE_genericConstructorDeclaration = 24, RULE_fieldDeclaration = 25, RULE_interfaceBodyDeclaration = 26, 
		RULE_interfaceMemberDeclaration = 27, RULE_constDeclaration = 28, RULE_constantDeclarator = 29, 
		RULE_interfaceMethodDeclaration = 30, RULE_genericInterfaceMethodDeclaration = 31, 
		RULE_variableDeclarators = 32, RULE_variableDeclarator = 33, RULE_variableDeclaratorId = 34, 
		RULE_variableInitializer = 35, RULE_arrayInitializer = 36, RULE_enumConstantName = 37, 
		RULE_type = 38, RULE_classOrInterfaceType = 39, RULE_primitiveType = 40, 
		RULE_typeArguments = 41, RULE_typeArgument = 42, RULE_qualifiedNameList = 43, 
		RULE_formalParameters = 44, RULE_formalParameterList = 45, RULE_formalParameter = 46, 
		RULE_lastFormalParameter = 47, RULE_methodBody = 48, RULE_constructorBody = 49, 
		RULE_qualifiedName = 50, RULE_literal = 51, RULE_annotation = 52, RULE_annotationName = 53, 
		RULE_elementValuePairs = 54, RULE_elementValuePair = 55, RULE_elementValue = 56, 
		RULE_elementValueArrayInitializer = 57, RULE_annotationTypeDeclaration = 58, 
		RULE_annotationTypeBody = 59, RULE_annotationTypeElementDeclaration = 60, 
		RULE_annotationTypeElementRest = 61, RULE_annotationMethodOrConstantRest = 62, 
		RULE_annotationMethodRest = 63, RULE_annotationConstantRest = 64, RULE_defaultValue = 65, 
		RULE_block = 66, RULE_blockStatement = 67, RULE_localVariableDeclarationStatement = 68, 
		RULE_localVariableDeclaration = 69, RULE_statement = 70, RULE_catchClause = 71, 
		RULE_catchType = 72, RULE_finallyBlock = 73, RULE_resourceSpecification = 74, 
		RULE_resources = 75, RULE_resource = 76, RULE_switchBlockStatementGroup = 77, 
		RULE_switchLabel = 78, RULE_forControl = 79, RULE_forInit = 80, RULE_enhancedForControl = 81, 
		RULE_forUpdate = 82, RULE_parExpression = 83, RULE_expressionList = 84, 
		RULE_statementExpression = 85, RULE_constantExpression = 86, RULE_expression = 87, 
		RULE_primary = 88, RULE_creator = 89, RULE_createdName = 90, RULE_innerCreator = 91, 
		RULE_arrayCreatorRest = 92, RULE_classCreatorRest = 93, RULE_explicitGenericInvocation = 94, 
		RULE_nonWildcardTypeArguments = 95, RULE_typeArgumentsOrDiamond = 96, 
		RULE_nonWildcardTypeArgumentsOrDiamond = 97, RULE_superSuffix = 98, RULE_explicitGenericInvocationSuffix = 99, 
		RULE_arguments = 100;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
		"modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
		"typeParameters", "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
		"enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "typeList", 
		"classBody", "interfaceBody", "classBodyDeclaration", "memberDeclaration", 
		"methodDeclaration", "genericMethodDeclaration", "constructorDeclaration", 
		"genericConstructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
		"interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
		"interfaceMethodDeclaration", "genericInterfaceMethodDeclaration", "variableDeclarators", 
		"variableDeclarator", "variableDeclaratorId", "variableInitializer", "arrayInitializer", 
		"enumConstantName", "type", "classOrInterfaceType", "primitiveType", "typeArguments", 
		"typeArgument", "qualifiedNameList", "formalParameters", "formalParameterList", 
		"formalParameter", "lastFormalParameter", "methodBody", "constructorBody", 
		"qualifiedName", "literal", "annotation", "annotationName", "elementValuePairs", 
		"elementValuePair", "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
		"annotationTypeBody", "annotationTypeElementDeclaration", "annotationTypeElementRest", 
		"annotationMethodOrConstantRest", "annotationMethodRest", "annotationConstantRest", 
		"defaultValue", "block", "blockStatement", "localVariableDeclarationStatement", 
		"localVariableDeclaration", "statement", "catchClause", "catchType", "finallyBlock", 
		"resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
		"switchLabel", "forControl", "forInit", "enhancedForControl", "forUpdate", 
		"parExpression", "expressionList", "statementExpression", "constantExpression", 
		"expression", "primary", "creator", "createdName", "innerCreator", "arrayCreatorRest", 
		"classCreatorRest", "explicitGenericInvocation", "nonWildcardTypeArguments", 
		"typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "superSuffix", 
		"explicitGenericInvocationSuffix", "arguments"
	};

	public override string GrammarFileName { get { return "Java.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public JavaParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ITerminalNode Eof() { return GetToken(JavaParser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 202; packageDeclaration();
				}
				break;
			}
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IMPORT) {
				{
				{
				State = 205; importDeclaration();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==AT) {
				{
				{
				State = 211; typeDeclaration();
				}
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 217; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 219; annotation();
				}
				}
				State = 224;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 225; Match(PACKAGE);
			State = 226; qualifiedName();
			State = 227; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(IMPORT);
			State = 231;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 230; Match(STATIC);
				}
			}

			State = 233; qualifiedName();
			State = 236;
			_la = _input.La(1);
			if (_la==DOT) {
				{
				State = 234; Match(DOT);
				State = 235; Match(MUL);
				}
			}

			State = 238; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		int _la;
		try {
			int _alt;
			State = 269;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
					{
					{
					State = 240; classOrInterfaceModifier();
					}
					}
					State = 245;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 246; classDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
					{
					{
					State = 247; classOrInterfaceModifier();
					}
					}
					State = 252;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 253; enumDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
					{
					{
					State = 254; classOrInterfaceModifier();
					}
					}
					State = 259;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 260; interfaceDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 264;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 261; classOrInterfaceModifier();
						}
						} 
					}
					State = 266;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				}
				State = 267; annotationTypeDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 268; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
			return GetRuleContext<ClassOrInterfaceModifierContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_modifier);
		int _la;
		try {
			State = 273;
			switch (_input.La(1)) {
			case ABSTRACT:
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; classOrInterfaceModifier();
				}
				break;
			case NATIVE:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NATIVE) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_classOrInterfaceModifier);
		int _la;
		try {
			State = 277;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; annotation();
				}
				break;
			case ABSTRACT:
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_variableModifier);
		try {
			State = 281;
			switch (_input.La(1)) {
			case FINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; Match(FINAL);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(CLASS);
			State = 284; Match(Identifier);
			State = 286;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 285; typeParameters();
				}
			}

			State = 290;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 288; Match(EXTENDS);
				State = 289; type();
				}
			}

			State = 294;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 292; Match(IMPLEMENTS);
				State = 293; typeList();
				}
			}

			State = 296; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(LT);
			State = 299; typeParameter();
			State = 304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 300; Match(COMMA);
				State = 301; typeParameter();
				}
				}
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 307; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(Identifier);
			State = 312;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 310; Match(EXTENDS);
				State = 311; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; type();
			State = 319;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITAND) {
				{
				{
				State = 315; Match(BITAND);
				State = 316; type();
				}
				}
				State = 321;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(JavaParser.ENUM, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(ENUM);
			State = 323; Match(Identifier);
			State = 326;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 324; Match(IMPLEMENTS);
				State = 325; typeList();
				}
			}

			State = 328; Match(LBRACE);
			State = 330;
			_la = _input.La(1);
			if (_la==Identifier || _la==AT) {
				{
				State = 329; enumConstants();
				}
			}

			State = 333;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 332; Match(COMMA);
				}
			}

			State = 336;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 335; enumBodyDeclarations();
				}
			}

			State = 338; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_enumConstants);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; enumConstant();
			State = 345;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 341; Match(COMMA);
					State = 342; enumConstant();
					}
					} 
				}
				State = 347;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 348; annotation();
				}
				}
				State = 353;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 354; Match(Identifier);
			State = 356;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 355; arguments();
				}
			}

			State = 359;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 358; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(SEMI);
			State = 365;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 362; classBodyDeclaration();
				}
				}
				State = 367;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(INTERFACE);
			State = 369; Match(Identifier);
			State = 371;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 370; typeParameters();
				}
			}

			State = 375;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 373; Match(EXTENDS);
				State = 374; typeList();
				}
			}

			State = 377; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; type();
			State = 384;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 380; Match(COMMA);
				State = 381; type();
				}
				}
				State = 386;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(LBRACE);
			State = 391;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 388; classBodyDeclaration();
				}
				}
				State = 393;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 394; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
			return GetRuleContext<InterfaceBodyDeclarationContext>(i);
		}
		public InterfaceBodyDeclarationContext[] interfaceBodyDeclaration() {
			return GetRuleContexts<InterfaceBodyDeclarationContext>();
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(LBRACE);
			State = 400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 397; interfaceBodyDeclaration();
				}
				}
				State = 402;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 403; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_classBodyDeclaration);
		int _la;
		try {
			int _alt;
			State = 417;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407;
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 406; Match(STATIC);
					}
				}

				State = 409; block();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 413;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 410; modifier();
						}
						} 
					}
					State = 415;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
				}
				State = 416; memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext genericConstructorDeclaration() {
			return GetRuleContext<GenericConstructorDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_memberDeclaration);
		try {
			State = 428;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419; methodDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420; genericMethodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 421; fieldDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 422; constructorDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 423; genericConstructorDeclaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 424; interfaceDeclaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 425; annotationTypeDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 426; classDeclaration();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 427; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				{
				State = 430; type();
				}
				break;
			case VOID:
				{
				State = 431; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 434; Match(Identifier);
			State = 435; formalParameters();
			State = 440;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 436; Match(LBRACK);
				State = 437; Match(RBRACK);
				}
				}
				State = 442;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 445;
			_la = _input.La(1);
			if (_la==THROWS) {
				{
				State = 443; Match(THROWS);
				State = 444; qualifiedNameList();
				}
			}

			State = 449;
			switch (_input.La(1)) {
			case LBRACE:
				{
				State = 447; methodBody();
				}
				break;
			case SEMI:
				{
				State = 448; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; typeParameters();
			State = 452; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(Identifier);
			State = 455; formalParameters();
			State = 458;
			_la = _input.La(1);
			if (_la==THROWS) {
				{
				State = 456; Match(THROWS);
				State = 457; qualifiedNameList();
				}
			}

			State = 460; constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstructorDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterGenericConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitGenericConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstructorDeclarationContext genericConstructorDeclaration() {
		GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_genericConstructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; typeParameters();
			State = 463; constructorDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; type();
			State = 466; variableDeclarators();
			State = 467; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyDeclarationContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
			return GetRuleContext<InterfaceMemberDeclarationContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyDeclarationContext interfaceBodyDeclaration() {
		InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_interfaceBodyDeclaration);
		try {
			int _alt;
			State = 477;
			switch (_input.La(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
			case LT:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 469; modifier();
						}
						} 
					}
					State = 474;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				}
				State = 475; interfaceMemberDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
			return GetRuleContext<GenericInterfaceMethodDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_interfaceMemberDeclaration);
		try {
			State = 486;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479; constDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480; interfaceMethodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 481; genericInterfaceMethodDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 482; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 483; annotationTypeDeclaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 484; classDeclaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 485; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; type();
			State = 489; constantDeclarator();
			State = 494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 490; Match(COMMA);
				State = 491; constantDeclarator();
				}
				}
				State = 496;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 497; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstantDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstantDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext constantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_constantDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(Identifier);
			State = 504;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 500; Match(LBRACK);
				State = 501; Match(RBRACK);
				}
				}
				State = 506;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 507; Match(ASSIGN);
			State = 508; variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				{
				State = 510; type();
				}
				break;
			case VOID:
				{
				State = 511; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 514; Match(Identifier);
			State = 515; formalParameters();
			State = 520;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 516; Match(LBRACK);
				State = 517; Match(RBRACK);
				}
				}
				State = 522;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 525;
			_la = _input.La(1);
			if (_la==THROWS) {
				{
				State = 523; Match(THROWS);
				State = 524; qualifiedNameList();
				}
			}

			State = 527; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericInterfaceMethodDeclarationContext : ParserRuleContext {
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public GenericInterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericInterfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterGenericInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitGenericInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
		GenericInterfaceMethodDeclarationContext _localctx = new GenericInterfaceMethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_genericInterfaceMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529; typeParameters();
			State = 530; interfaceMethodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; variableDeclarator();
			State = 537;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 533; Match(COMMA);
				State = 534; variableDeclarator();
				}
				}
				State = 539;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; variableDeclaratorId();
			State = 543;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 541; Match(ASSIGN);
				State = 542; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(Identifier);
			State = 550;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 546; Match(LBRACK);
				State = 547; Match(RBRACK);
				}
				}
				State = 552;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_variableInitializer);
		try {
			State = 555;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 553; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(LBRACE);
			State = 569;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)))) != 0)) {
				{
				State = 558; variableInitializer();
				State = 563;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 559; Match(COMMA);
						State = 560; variableInitializer();
						}
						} 
					}
					State = 565;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
				}
				State = 567;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 566; Match(COMMA);
					}
				}

				}
			}

			State = 571; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_type);
		try {
			int _alt;
			State = 591;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575; classOrInterfaceType();
				State = 580;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 576; Match(LBRACK);
						State = 577; Match(RBRACK);
						}
						} 
					}
					State = 582;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,58,_ctx);
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; primitiveType();
				State = 588;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 584; Match(LBRACK);
						State = 585; Match(RBRACK);
						}
						} 
					}
					State = 590;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ITerminalNode Identifier(int i) {
			return GetToken(JavaParser.Identifier, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(JavaParser.Identifier); }
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 593; Match(Identifier);
			State = 595;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 594; typeArguments();
				}
				break;
			}
			State = 604;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 597; Match(DOT);
					State = 598; Match(Identifier);
					State = 600;
					switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						State = 599; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 606;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; Match(LT);
			State = 610; typeArgument();
			State = 615;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 611; Match(COMMA);
				State = 612; typeArgument();
				}
				}
				State = 617;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 618; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_typeArgument);
		int _la;
		try {
			State = 626;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 620; type();
				}
				break;
			case QUESTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621; Match(QUESTION);
				State = 624;
				_la = _input.La(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 622;
					_la = _input.La(1);
					if ( !(_la==EXTENDS || _la==SUPER) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 623; type();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; qualifiedName();
			State = 633;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 629; Match(COMMA);
				State = 630; qualifiedName();
				}
				}
				State = 635;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; Match(LPAREN);
			State = 638;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 637; formalParameterList();
				}
			}

			State = 640; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 655;
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 642; formalParameter();
				State = 647;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,69,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 643; Match(COMMA);
						State = 644; formalParameter();
						}
						} 
					}
					State = 649;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,69,_ctx);
				}
				State = 652;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 650; Match(COMMA);
					State = 651; lastFormalParameter();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 654; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 657; variableModifier();
				}
				}
				State = 662;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 663; type();
			State = 664; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_lastFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 666; variableModifier();
				}
				}
				State = 671;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 672; type();
			State = 673; Match(ELLIPSIS);
			State = 674; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_constructorBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public ITerminalNode Identifier(int i) {
			return GetToken(JavaParser.Identifier, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(JavaParser.Identifier); }
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; Match(Identifier);
			State = 685;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 681; Match(DOT);
					State = 682; Match(Identifier);
					}
					} 
				}
				State = 687;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,74,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode CharacterLiteral() { return GetToken(JavaParser.CharacterLiteral, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(JavaParser.IntegerLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(JavaParser.StringLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(JavaParser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(JavaParser.BooleanLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairsContext elementValuePairs() {
			return GetRuleContext<ElementValuePairsContext>(0);
		}
		public AnnotationNameContext annotationName() {
			return GetRuleContext<AnnotationNameContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690; Match(AT);
			State = 691; annotationName();
			State = 698;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 692; Match(LPAREN);
				State = 695;
				switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					State = 693; elementValuePairs();
					}
					break;

				case 2:
					{
					State = 694; elementValue();
					}
					break;
				}
				State = 697; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationNameContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationNameContext annotationName() {
		AnnotationNameContext _localctx = new AnnotationNameContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_annotationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValuePairs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValuePairs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsContext elementValuePairs() {
		ElementValuePairsContext _localctx = new ElementValuePairsContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_elementValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702; elementValuePair();
			State = 707;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 703; Match(COMMA);
				State = 704; elementValuePair();
				}
				}
				State = 709;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(Identifier);
			State = 711; Match(ASSIGN);
			State = 712; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_elementValue);
		try {
			State = 717;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 714; expression(0);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 715; annotation();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 716; elementValueArrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_elementValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; Match(LBRACE);
			State = 728;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				State = 720; elementValue();
				State = 725;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,79,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 721; Match(COMMA);
						State = 722; elementValue();
						}
						} 
					}
					State = 727;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,79,_ctx);
				}
				}
			}

			State = 731;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 730; Match(COMMA);
				}
			}

			State = 733; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(AT);
			State = 736; Match(INTERFACE);
			State = 737; Match(Identifier);
			State = 738; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext[] annotationTypeElementDeclaration() {
			return GetRuleContexts<AnnotationTypeElementDeclarationContext>();
		}
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; Match(LBRACE);
			State = 744;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOLATILE) | (1L << SEMI))) != 0) || _la==Identifier || _la==AT) {
				{
				{
				State = 741; annotationTypeElementDeclaration();
				}
				}
				State = 746;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 747; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public AnnotationTypeElementRestContext annotationTypeElementRest() {
			return GetRuleContext<AnnotationTypeElementRestContext>(0);
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_annotationTypeElementDeclaration);
		try {
			int _alt;
			State = 757;
			switch (_input.La(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,83,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 749; modifier();
						}
						} 
					}
					State = 754;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,83,_ctx);
				}
				State = 755; annotationTypeElementRest();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementRestContext : ParserRuleContext {
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
			return GetRuleContext<AnnotationMethodOrConstantRestContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementRestContext annotationTypeElementRest() {
		AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_annotationTypeElementRest);
		try {
			State = 779;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759; type();
				State = 760; annotationMethodOrConstantRest();
				State = 761; Match(SEMI);
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763; classDeclaration();
				State = 765;
				switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					State = 764; Match(SEMI);
					}
					break;
				}
				}
				break;
			case INTERFACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 767; interfaceDeclaration();
				State = 769;
				switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
				case 1:
					{
					State = 768; Match(SEMI);
					}
					break;
				}
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 771; enumDeclaration();
				State = 773;
				switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					State = 772; Match(SEMI);
					}
					break;
				}
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 775; annotationTypeDeclaration();
				State = 777;
				switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					State = 776; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodOrConstantRestContext : ParserRuleContext {
		public AnnotationConstantRestContext annotationConstantRest() {
			return GetRuleContext<AnnotationConstantRestContext>(0);
		}
		public AnnotationMethodRestContext annotationMethodRest() {
			return GetRuleContext<AnnotationMethodRestContext>(0);
		}
		public AnnotationMethodOrConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodOrConstantRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodOrConstantRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodOrConstantRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodOrConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
		AnnotationMethodOrConstantRestContext _localctx = new AnnotationMethodOrConstantRestContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_annotationMethodOrConstantRest);
		try {
			State = 783;
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 781; annotationMethodRest();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782; annotationConstantRest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodRestContext : ParserRuleContext {
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodRestContext annotationMethodRest() {
		AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_annotationMethodRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(Identifier);
			State = 786; Match(LPAREN);
			State = 787; Match(RPAREN);
			State = 789;
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 788; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationConstantRestContext : ParserRuleContext {
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationConstantRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterAnnotationConstantRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitAnnotationConstantRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationConstantRestContext annotationConstantRest() {
		AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_annotationConstantRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(DEFAULT);
			State = 794; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796; Match(LBRACE);
			State = 800;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 797; blockStatement();
				}
				}
				State = 802;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 803; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_blockStatement);
		try {
			State = 808;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 805; localVariableDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806; statement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 807; typeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; localVariableDeclaration();
			State = 811; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 813; variableModifier();
				}
				}
				State = 818;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 819; type();
			State = 820; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ASSERT() { return GetToken(JavaParser.ASSERT, 0); }
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 926;
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822; block();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 823; Match(ASSERT);
				State = 824; expression(0);
				State = 827;
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 825; Match(COLON);
					State = 826; expression(0);
					}
				}

				State = 829; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 831; Match(IF);
				State = 832; parExpression();
				State = 833; statement();
				State = 836;
				switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					State = 834; Match(ELSE);
					State = 835; statement();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 838; Match(FOR);
				State = 839; Match(LPAREN);
				State = 840; forControl();
				State = 841; Match(RPAREN);
				State = 842; statement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 844; Match(WHILE);
				State = 845; parExpression();
				State = 846; statement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 848; Match(DO);
				State = 849; statement();
				State = 850; Match(WHILE);
				State = 851; parExpression();
				State = 852; Match(SEMI);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 854; Match(TRY);
				State = 855; block();
				State = 865;
				switch (_input.La(1)) {
				case CATCH:
					{
					State = 857;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 856; catchClause();
						}
						}
						State = 859;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==CATCH );
					State = 862;
					_la = _input.La(1);
					if (_la==FINALLY) {
						{
						State = 861; finallyBlock();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 864; finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 867; Match(TRY);
				State = 868; resourceSpecification();
				State = 869; block();
				State = 873;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CATCH) {
					{
					{
					State = 870; catchClause();
					}
					}
					State = 875;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 877;
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 876; finallyBlock();
					}
				}

				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 879; Match(SWITCH);
				State = 880; parExpression();
				State = 881; Match(LBRACE);
				State = 885;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,102,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 882; switchBlockStatementGroup();
						}
						} 
					}
					State = 887;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,102,_ctx);
				}
				State = 891;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 888; switchLabel();
					}
					}
					State = 893;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 894; Match(RBRACE);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 896; Match(SYNCHRONIZED);
				State = 897; parExpression();
				State = 898; block();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 900; Match(RETURN);
				State = 902;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)))) != 0)) {
					{
					State = 901; expression(0);
					}
				}

				State = 904; Match(SEMI);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 905; Match(THROW);
				State = 906; expression(0);
				State = 907; Match(SEMI);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 909; Match(BREAK);
				State = 911;
				_la = _input.La(1);
				if (_la==Identifier) {
					{
					State = 910; Match(Identifier);
					}
				}

				State = 913; Match(SEMI);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 914; Match(CONTINUE);
				State = 916;
				_la = _input.La(1);
				if (_la==Identifier) {
					{
					State = 915; Match(Identifier);
					}
				}

				State = 918; Match(SEMI);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 919; Match(SEMI);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 920; statementExpression();
				State = 921; Match(SEMI);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 923; Match(Identifier);
				State = 924; Match(COLON);
				State = 925; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928; Match(CATCH);
			State = 929; Match(LPAREN);
			State = 933;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 930; variableModifier();
				}
				}
				State = 935;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 936; catchType();
			State = 937; Match(Identifier);
			State = 938; Match(RPAREN);
			State = 939; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; qualifiedName();
			State = 946;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITOR) {
				{
				{
				State = 942; Match(BITOR);
				State = 943; qualifiedName();
				}
				}
				State = 948;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_finallyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949; Match(FINALLY);
			State = 950; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ResourcesContext resources() {
			return GetRuleContext<ResourcesContext>(0);
		}
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; Match(LPAREN);
			State = 953; resources();
			State = 955;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 954; Match(SEMI);
				}
			}

			State = 957; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourcesContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ResourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resources; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterResources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitResources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourcesContext resources() {
		ResourcesContext _localctx = new ResourcesContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_resources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; resource();
			State = 964;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 960; Match(SEMI);
					State = 961; resource();
					}
					} 
				}
				State = 966;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,111,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 967; variableModifier();
				}
				}
				State = 972;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 973; classOrInterfaceType();
			State = 974; variableDeclaratorId();
			State = 975; Match(ASSIGN);
			State = 976; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 978; switchLabel();
				}
				}
				State = 981;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 984;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 983; blockStatement();
				}
				}
				State = 986;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_switchLabel);
		try {
			State = 998;
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 988; Match(CASE);
				State = 989; constantExpression();
				State = 990; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 992; Match(CASE);
				State = 993; enumConstantName();
				State = 994; Match(COLON);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 996; Match(DEFAULT);
				State = 997; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_forControl);
		int _la;
		try {
			State = 1012;
			switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1000; enhancedForControl();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
					{
					State = 1001; forInit();
					}
				}

				State = 1004; Match(SEMI);
				State = 1006;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)))) != 0)) {
					{
					State = 1005; expression(0);
					}
				}

				State = 1008; Match(SEMI);
				State = 1010;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)))) != 0)) {
					{
					State = 1009; forUpdate();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_forInit);
		try {
			State = 1016;
			switch ( Interpreter.AdaptivePredict(_input,120,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1014; localVariableDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1015; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_enhancedForControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1018; variableModifier();
				}
				}
				State = 1023;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1024; type();
			State = 1025; variableDeclaratorId();
			State = 1026; Match(COLON);
			State = 1027; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029; expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031; Match(LPAREN);
			State = 1032; expression(0);
			State = 1033; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035; expression(0);
			State = 1040;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1036; Match(COMMA);
				State = 1037; expression(0);
				}
				}
				State = 1042;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_statementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1045; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 174;
		EnterRecursionRule(_localctx, 174, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1048; Match(LPAREN);
				State = 1049; type();
				State = 1050; Match(RPAREN);
				State = 1051; expression(17);
				}
				break;

			case 2:
				{
				State = 1053;
				_la = _input.La(1);
				if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (ADD - 79)) | (1L << (SUB - 79)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1054; expression(15);
				}
				break;

			case 3:
				{
				State = 1055;
				_la = _input.La(1);
				if ( !(_la==BANG || _la==TILDE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1056; expression(14);
				}
				break;

			case 4:
				{
				State = 1057; primary();
				}
				break;

			case 5:
				{
				State = 1058; Match(NEW);
				State = 1059; creator();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 1147;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,128,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1145;
					switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1062;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 1063;
						_la = _input.La(1);
						if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (MUL - 83)) | (1L << (DIV - 83)) | (1L << (MOD - 83)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1064; expression(14);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1065;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 1066;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1067; expression(13);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1068;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 1076;
						switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
						case 1:
							{
							State = 1069; Match(LT);
							State = 1070; Match(LT);
							}
							break;

						case 2:
							{
							State = 1071; Match(GT);
							State = 1072; Match(GT);
							State = 1073; Match(GT);
							}
							break;

						case 3:
							{
							State = 1074; Match(GT);
							State = 1075; Match(GT);
							}
							break;
						}
						State = 1078; expression(12);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1079;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 1080;
						_la = _input.La(1);
						if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (GT - 67)) | (1L << (LT - 67)) | (1L << (LE - 67)) | (1L << (GE - 67)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1081; expression(11);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1082;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 1083;
						_la = _input.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1084; expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1085;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 1086; Match(BITAND);
						State = 1087; expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1088;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 1089; Match(CARET);
						State = 1090; expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1091;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 1092; Match(BITOR);
						State = 1093; expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1094;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 1095; Match(AND);
						State = 1096; expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1097;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 1098; Match(OR);
						State = 1099; expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1100;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 1101; Match(QUESTION);
						State = 1102; expression(0);
						State = 1103; Match(COLON);
						State = 1104; expression(3);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1106;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 1107;
						_la = _input.La(1);
						if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ASSIGN - 66)) | (1L << (ADD_ASSIGN - 66)) | (1L << (SUB_ASSIGN - 66)) | (1L << (MUL_ASSIGN - 66)) | (1L << (DIV_ASSIGN - 66)) | (1L << (AND_ASSIGN - 66)) | (1L << (OR_ASSIGN - 66)) | (1L << (XOR_ASSIGN - 66)) | (1L << (MOD_ASSIGN - 66)) | (1L << (LSHIFT_ASSIGN - 66)) | (1L << (RSHIFT_ASSIGN - 66)) | (1L << (URSHIFT_ASSIGN - 66)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1108; expression(1);
						}
						break;

					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1109;
						if (!(Precpred(_ctx, 25))) throw new FailedPredicateException(this, "Precpred(_ctx, 25)");
						State = 1110; Match(DOT);
						State = 1111; Match(Identifier);
						}
						break;

					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1112;
						if (!(Precpred(_ctx, 24))) throw new FailedPredicateException(this, "Precpred(_ctx, 24)");
						State = 1113; Match(DOT);
						State = 1114; Match(THIS);
						}
						break;

					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1115;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 1116; Match(DOT);
						State = 1117; Match(NEW);
						State = 1119;
						_la = _input.La(1);
						if (_la==LT) {
							{
							State = 1118; nonWildcardTypeArguments();
							}
						}

						State = 1121; innerCreator();
						}
						break;

					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1122;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 1123; Match(DOT);
						State = 1124; Match(SUPER);
						State = 1125; superSuffix();
						}
						break;

					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1126;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 1127; Match(DOT);
						State = 1128; explicitGenericInvocation();
						}
						break;

					case 18:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1129;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 1130; Match(LBRACK);
						State = 1131; expression(0);
						State = 1132; Match(RBRACK);
						}
						break;

					case 19:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1134;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 1135; Match(LPAREN);
						State = 1137;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)))) != 0)) {
							{
							State = 1136; expressionList();
							}
						}

						State = 1139; Match(RPAREN);
						}
						break;

					case 20:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1140;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 1141;
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						}
						break;

					case 21:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1142;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 1143; Match(INSTANCEOF);
						State = 1144; type();
						}
						break;
					}
					} 
				}
				State = 1149;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,128,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_primary);
		try {
			State = 1171;
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1150; Match(LPAREN);
				State = 1151; expression(0);
				State = 1152; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1154; Match(THIS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1155; Match(SUPER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1156; literal();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1157; Match(Identifier);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1158; type();
				State = 1159; Match(DOT);
				State = 1160; Match(CLASS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1162; Match(VOID);
				State = 1163; Match(DOT);
				State = 1164; Match(CLASS);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1165; nonWildcardTypeArguments();
				State = 1169;
				switch (_input.La(1)) {
				case SUPER:
				case Identifier:
					{
					State = 1166; explicitGenericInvocationSuffix();
					}
					break;
				case THIS:
					{
					State = 1167; Match(THIS);
					State = 1168; arguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_creator);
		try {
			State = 1182;
			switch (_input.La(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1173; nonWildcardTypeArguments();
				State = 1174; createdName();
				State = 1175; classCreatorRest();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1177; createdName();
				State = 1180;
				switch (_input.La(1)) {
				case LBRACK:
					{
					State = 1178; arrayCreatorRest();
					}
					break;
				case LPAREN:
					{
					State = 1179; classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		public ITerminalNode Identifier(int i) {
			return GetToken(JavaParser.Identifier, i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(JavaParser.Identifier); }
		public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_createdName);
		int _la;
		try {
			State = 1199;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1184; Match(Identifier);
				State = 1186;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1185; typeArgumentsOrDiamond();
					}
				}

				State = 1195;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 1188; Match(DOT);
					State = 1189; Match(Identifier);
					State = 1191;
					_la = _input.La(1);
					if (_la==LT) {
						{
						State = 1190; typeArgumentsOrDiamond();
						}
					}

					}
					}
					State = 1197;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1198; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201; Match(Identifier);
			State = 1203;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1202; nonWildcardTypeArgumentsOrDiamond();
				}
			}

			State = 1205; classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207; Match(LBRACK);
			State = 1235;
			switch (_input.La(1)) {
			case RBRACK:
				{
				State = 1208; Match(RBRACK);
				State = 1213;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1209; Match(LBRACK);
					State = 1210; Match(RBRACK);
					}
					}
					State = 1215;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1216; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				{
				State = 1217; expression(0);
				State = 1218; Match(RBRACK);
				State = 1225;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,139,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1219; Match(LBRACK);
						State = 1220; expression(0);
						State = 1221; Match(RBRACK);
						}
						} 
					}
					State = 1227;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,139,_ctx);
				}
				State = 1232;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,140,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1228; Match(LBRACK);
						State = 1229; Match(RBRACK);
						}
						} 
					}
					State = 1234;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,140,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237; arguments();
			State = 1239;
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1238; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241; nonWildcardTypeArguments();
			State = 1242; explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244; Match(LT);
			State = 1245; typeList();
			State = 1246; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_typeArgumentsOrDiamond);
		try {
			State = 1251;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248; Match(LT);
				State = 1249; Match(GT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1250; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 1256;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1253; Match(LT);
				State = 1254; Match(GT);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1255; nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_superSuffix);
		try {
			State = 1264;
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1258; arguments();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1259; Match(DOT);
				State = 1260; Match(Identifier);
				State = 1262;
				switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					State = 1261; arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(JavaParser.Identifier, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_explicitGenericInvocationSuffix);
		try {
			State = 1270;
			switch (_input.La(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1266; Match(SUPER);
				State = 1267; superSuffix();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1268; Match(Identifier);
				State = 1269; arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaListener typedListener = listener as IJavaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaVisitor<TResult> typedVisitor = visitor as IJavaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272; Match(LPAREN);
			State = 1274;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (BANG - 68)) | (1L << (TILDE - 68)) | (1L << (INC - 68)) | (1L << (DEC - 68)) | (1L << (ADD - 68)) | (1L << (SUB - 68)) | (1L << (Identifier - 68)))) != 0)) {
				{
				State = 1273; expressionList();
				}
			}

			State = 1276; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 87: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 13);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);

		case 12: return Precpred(_ctx, 25);

		case 13: return Precpred(_ctx, 24);

		case 14: return Precpred(_ctx, 23);

		case 15: return Precpred(_ctx, 22);

		case 17: return Precpred(_ctx, 20);

		case 16: return Precpred(_ctx, 21);

		case 19: return Precpred(_ctx, 16);

		case 18: return Precpred(_ctx, 19);

		case 20: return Precpred(_ctx, 9);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3k\x501\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x3\x2"+
		"\x5\x2\xCE\n\x2\x3\x2\a\x2\xD1\n\x2\f\x2\xE\x2\xD4\v\x2\x3\x2\a\x2\xD7"+
		"\n\x2\f\x2\xE\x2\xDA\v\x2\x3\x2\x3\x2\x3\x3\a\x3\xDF\n\x3\f\x3\xE\x3\xE2"+
		"\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4\xEA\n\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\xEF\n\x4\x3\x4\x3\x4\x3\x5\a\x5\xF4\n\x5\f\x5\xE\x5\xF7\v\x5"+
		"\x3\x5\x3\x5\a\x5\xFB\n\x5\f\x5\xE\x5\xFE\v\x5\x3\x5\x3\x5\a\x5\x102\n"+
		"\x5\f\x5\xE\x5\x105\v\x5\x3\x5\x3\x5\a\x5\x109\n\x5\f\x5\xE\x5\x10C\v"+
		"\x5\x3\x5\x3\x5\x5\x5\x110\n\x5\x3\x6\x3\x6\x5\x6\x114\n\x6\x3\a\x3\a"+
		"\x5\a\x118\n\a\x3\b\x3\b\x5\b\x11C\n\b\x3\t\x3\t\x3\t\x5\t\x121\n\t\x3"+
		"\t\x3\t\x5\t\x125\n\t\x3\t\x3\t\x5\t\x129\n\t\x3\t\x3\t\x3\n\x3\n\x3\n"+
		"\x3\n\a\n\x131\n\n\f\n\xE\n\x134\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v\x13B"+
		"\n\v\x3\f\x3\f\x3\f\a\f\x140\n\f\f\f\xE\f\x143\v\f\x3\r\x3\r\x3\r\x3\r"+
		"\x5\r\x149\n\r\x3\r\x3\r\x5\r\x14D\n\r\x3\r\x5\r\x150\n\r\x3\r\x5\r\x153"+
		"\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x15A\n\xE\f\xE\xE\xE\x15D\v\xE\x3"+
		"\xF\a\xF\x160\n\xF\f\xF\xE\xF\x163\v\xF\x3\xF\x3\xF\x5\xF\x167\n\xF\x3"+
		"\xF\x5\xF\x16A\n\xF\x3\x10\x3\x10\a\x10\x16E\n\x10\f\x10\xE\x10\x171\v"+
		"\x10\x3\x11\x3\x11\x3\x11\x5\x11\x176\n\x11\x3\x11\x3\x11\x5\x11\x17A"+
		"\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\x181\n\x12\f\x12\xE\x12"+
		"\x184\v\x12\x3\x13\x3\x13\a\x13\x188\n\x13\f\x13\xE\x13\x18B\v\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\a\x14\x191\n\x14\f\x14\xE\x14\x194\v\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x5\x15\x19A\n\x15\x3\x15\x3\x15\a\x15\x19E\n"+
		"\x15\f\x15\xE\x15\x1A1\v\x15\x3\x15\x5\x15\x1A4\n\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x1AF\n\x16\x3\x17"+
		"\x3\x17\x5\x17\x1B3\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x1B9\n\x17"+
		"\f\x17\xE\x17\x1BC\v\x17\x3\x17\x3\x17\x5\x17\x1C0\n\x17\x3\x17\x3\x17"+
		"\x5\x17\x1C4\n\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x1CD\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1C\a\x1C\x1D9\n\x1C\f\x1C\xE\x1C\x1DC\v\x1C\x3\x1C\x3\x1C"+
		"\x5\x1C\x1E0\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x1E9\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x1EF\n\x1E\f\x1E\xE"+
		"\x1E\x1F2\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\a\x1F\x1F9\n\x1F\f"+
		"\x1F\xE\x1F\x1FC\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x5 \x203\n \x3 \x3"+
		" \x3 \x3 \a \x209\n \f \xE \x20C\v \x3 \x3 \x5 \x210\n \x3 \x3 \x3!\x3"+
		"!\x3!\x3\"\x3\"\x3\"\a\"\x21A\n\"\f\"\xE\"\x21D\v\"\x3#\x3#\x3#\x5#\x222"+
		"\n#\x3$\x3$\x3$\a$\x227\n$\f$\xE$\x22A\v$\x3%\x3%\x5%\x22E\n%\x3&\x3&"+
		"\x3&\x3&\a&\x234\n&\f&\xE&\x237\v&\x3&\x5&\x23A\n&\x5&\x23C\n&\x3&\x3"+
		"&\x3\'\x3\'\x3(\x3(\x3(\a(\x245\n(\f(\xE(\x248\v(\x3(\x3(\x3(\a(\x24D"+
		"\n(\f(\xE(\x250\v(\x5(\x252\n(\x3)\x3)\x5)\x256\n)\x3)\x3)\x3)\x5)\x25B"+
		"\n)\a)\x25D\n)\f)\xE)\x260\v)\x3*\x3*\x3+\x3+\x3+\x3+\a+\x268\n+\f+\xE"+
		"+\x26B\v+\x3+\x3+\x3,\x3,\x3,\x3,\x5,\x273\n,\x5,\x275\n,\x3-\x3-\x3-"+
		"\a-\x27A\n-\f-\xE-\x27D\v-\x3.\x3.\x5.\x281\n.\x3.\x3.\x3/\x3/\x3/\a/"+
		"\x288\n/\f/\xE/\x28B\v/\x3/\x3/\x5/\x28F\n/\x3/\x5/\x292\n/\x3\x30\a\x30"+
		"\x295\n\x30\f\x30\xE\x30\x298\v\x30\x3\x30\x3\x30\x3\x30\x3\x31\a\x31"+
		"\x29E\n\x31\f\x31\xE\x31\x2A1\v\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\a\x34\x2AE\n\x34\f\x34\xE\x34"+
		"\x2B1\v\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x2BA"+
		"\n\x36\x3\x36\x5\x36\x2BD\n\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\a\x38"+
		"\x2C4\n\x38\f\x38\xE\x38\x2C7\v\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3"+
		":\x3:\x5:\x2D0\n:\x3;\x3;\x3;\x3;\a;\x2D6\n;\f;\xE;\x2D9\v;\x5;\x2DB\n"+
		";\x3;\x5;\x2DE\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\a=\x2E9\n=\f=\xE"+
		"=\x2EC\v=\x3=\x3=\x3>\a>\x2F1\n>\f>\xE>\x2F4\v>\x3>\x3>\x5>\x2F8\n>\x3"+
		"?\x3?\x3?\x3?\x3?\x3?\x5?\x300\n?\x3?\x3?\x5?\x304\n?\x3?\x3?\x5?\x308"+
		"\n?\x3?\x3?\x5?\x30C\n?\x5?\x30E\n?\x3@\x3@\x5@\x312\n@\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x5\x41\x318\n\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3"+
		"\x44\x3\x44\a\x44\x321\n\x44\f\x44\xE\x44\x324\v\x44\x3\x44\x3\x44\x3"+
		"\x45\x3\x45\x3\x45\x5\x45\x32B\n\x45\x3\x46\x3\x46\x3\x46\x3G\aG\x331"+
		"\nG\fG\xEG\x334\vG\x3G\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x5H\x33E\nH\x3H\x3"+
		"H\x3H\x3H\x3H\x3H\x3H\x5H\x347\nH\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H"+
		"\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x6H\x35C\nH\rH\xEH\x35D\x3H\x5"+
		"H\x361\nH\x3H\x5H\x364\nH\x3H\x3H\x3H\x3H\aH\x36A\nH\fH\xEH\x36D\vH\x3"+
		"H\x5H\x370\nH\x3H\x3H\x3H\x3H\aH\x376\nH\fH\xEH\x379\vH\x3H\aH\x37C\n"+
		"H\fH\xEH\x37F\vH\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x5H\x389\nH\x3H\x3H\x3"+
		"H\x3H\x3H\x3H\x3H\x5H\x392\nH\x3H\x3H\x3H\x5H\x397\nH\x3H\x3H\x3H\x3H"+
		"\x3H\x3H\x3H\x3H\x5H\x3A1\nH\x3I\x3I\x3I\aI\x3A6\nI\fI\xEI\x3A9\vI\x3"+
		"I\x3I\x3I\x3I\x3I\x3J\x3J\x3J\aJ\x3B3\nJ\fJ\xEJ\x3B6\vJ\x3K\x3K\x3K\x3"+
		"L\x3L\x3L\x5L\x3BE\nL\x3L\x3L\x3M\x3M\x3M\aM\x3C5\nM\fM\xEM\x3C8\vM\x3"+
		"N\aN\x3CB\nN\fN\xEN\x3CE\vN\x3N\x3N\x3N\x3N\x3N\x3O\x6O\x3D6\nO\rO\xE"+
		"O\x3D7\x3O\x6O\x3DB\nO\rO\xEO\x3DC\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x5P\x3E9\nP\x3Q\x3Q\x5Q\x3ED\nQ\x3Q\x3Q\x5Q\x3F1\nQ\x3Q\x3Q\x5Q"+
		"\x3F5\nQ\x5Q\x3F7\nQ\x3R\x3R\x5R\x3FB\nR\x3S\aS\x3FE\nS\fS\xES\x401\v"+
		"S\x3S\x3S\x3S\x3S\x3S\x3T\x3T\x3U\x3U\x3U\x3U\x3V\x3V\x3V\aV\x411\nV\f"+
		"V\xEV\x414\vV\x3W\x3W\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x5Y\x427\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3"+
		"Y\x3Y\x3Y\x5Y\x437\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3"+
		"Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x462\nY\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x474\nY\x3Y\x3"+
		"Y\x3Y\x3Y\x3Y\x3Y\aY\x47C\nY\fY\xEY\x47F\vY\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x5Z\x494\nZ\x5Z\x496"+
		"\nZ\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x5[\x49F\n[\x5[\x4A1\n[\x3\\\x3\\\x5\\"+
		"\x4A5\n\\\x3\\\x3\\\x3\\\x5\\\x4AA\n\\\a\\\x4AC\n\\\f\\\xE\\\x4AF\v\\"+
		"\x3\\\x5\\\x4B2\n\\\x3]\x3]\x5]\x4B6\n]\x3]\x3]\x3^\x3^\x3^\x3^\a^\x4BE"+
		"\n^\f^\xE^\x4C1\v^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x4CA\n^\f^\xE^\x4CD"+
		"\v^\x3^\x3^\a^\x4D1\n^\f^\xE^\x4D4\v^\x5^\x4D6\n^\x3_\x3_\x5_\x4DA\n_"+
		"\x3`\x3`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x5\x62\x4E6"+
		"\n\x62\x3\x63\x3\x63\x3\x63\x5\x63\x4EB\n\x63\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x5\x64\x4F1\n\x64\x5\x64\x4F3\n\x64\x3\x65\x3\x65\x3\x65\x3\x65\x5"+
		"\x65\x4F9\n\x65\x3\x66\x3\x66\x5\x66\x4FD\n\x66\x3\x66\x3\x66\x3\x66\x2"+
		"\x2\x3\xB0g\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H"+
		"\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66"+
		"\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84"+
		"\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98"+
		"\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC"+
		"\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0"+
		"\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\x2\xF\x6\x2  ,,\x30\x30\x33\x33"+
		"\x6\x2\x3\x3\x14\x14#%()\n\x2\x5\x5\a\a\n\n\x10\x10\x16\x16\x1D\x1D\x1F"+
		"\x1F\'\'\x4\x2\x13\x13**\x3\x2\x35:\x3\x2QT\x3\x2GH\x4\x2UVZZ\x3\x2ST"+
		"\x4\x2\x45\x46LM\x4\x2KKNN\x4\x2\x44\x44[\x65\x3\x2QR\x573\x2\xCD\x3\x2"+
		"\x2\x2\x4\xE0\x3\x2\x2\x2\x6\xE7\x3\x2\x2\x2\b\x10F\x3\x2\x2\x2\n\x113"+
		"\x3\x2\x2\x2\f\x117\x3\x2\x2\x2\xE\x11B\x3\x2\x2\x2\x10\x11D\x3\x2\x2"+
		"\x2\x12\x12C\x3\x2\x2\x2\x14\x137\x3\x2\x2\x2\x16\x13C\x3\x2\x2\x2\x18"+
		"\x144\x3\x2\x2\x2\x1A\x156\x3\x2\x2\x2\x1C\x161\x3\x2\x2\x2\x1E\x16B\x3"+
		"\x2\x2\x2 \x172\x3\x2\x2\x2\"\x17D\x3\x2\x2\x2$\x185\x3\x2\x2\x2&\x18E"+
		"\x3\x2\x2\x2(\x1A3\x3\x2\x2\x2*\x1AE\x3\x2\x2\x2,\x1B2\x3\x2\x2\x2.\x1C5"+
		"\x3\x2\x2\x2\x30\x1C8\x3\x2\x2\x2\x32\x1D0\x3\x2\x2\x2\x34\x1D3\x3\x2"+
		"\x2\x2\x36\x1DF\x3\x2\x2\x2\x38\x1E8\x3\x2\x2\x2:\x1EA\x3\x2\x2\x2<\x1F5"+
		"\x3\x2\x2\x2>\x202\x3\x2\x2\x2@\x213\x3\x2\x2\x2\x42\x216\x3\x2\x2\x2"+
		"\x44\x21E\x3\x2\x2\x2\x46\x223\x3\x2\x2\x2H\x22D\x3\x2\x2\x2J\x22F\x3"+
		"\x2\x2\x2L\x23F\x3\x2\x2\x2N\x251\x3\x2\x2\x2P\x253\x3\x2\x2\x2R\x261"+
		"\x3\x2\x2\x2T\x263\x3\x2\x2\x2V\x274\x3\x2\x2\x2X\x276\x3\x2\x2\x2Z\x27E"+
		"\x3\x2\x2\x2\\\x291\x3\x2\x2\x2^\x296\x3\x2\x2\x2`\x29F\x3\x2\x2\x2\x62"+
		"\x2A6\x3\x2\x2\x2\x64\x2A8\x3\x2\x2\x2\x66\x2AA\x3\x2\x2\x2h\x2B2\x3\x2"+
		"\x2\x2j\x2B4\x3\x2\x2\x2l\x2BE\x3\x2\x2\x2n\x2C0\x3\x2\x2\x2p\x2C8\x3"+
		"\x2\x2\x2r\x2CF\x3\x2\x2\x2t\x2D1\x3\x2\x2\x2v\x2E1\x3\x2\x2\x2x\x2E6"+
		"\x3\x2\x2\x2z\x2F7\x3\x2\x2\x2|\x30D\x3\x2\x2\x2~\x311\x3\x2\x2\x2\x80"+
		"\x313\x3\x2\x2\x2\x82\x319\x3\x2\x2\x2\x84\x31B\x3\x2\x2\x2\x86\x31E\x3"+
		"\x2\x2\x2\x88\x32A\x3\x2\x2\x2\x8A\x32C\x3\x2\x2\x2\x8C\x332\x3\x2\x2"+
		"\x2\x8E\x3A0\x3\x2\x2\x2\x90\x3A2\x3\x2\x2\x2\x92\x3AF\x3\x2\x2\x2\x94"+
		"\x3B7\x3\x2\x2\x2\x96\x3BA\x3\x2\x2\x2\x98\x3C1\x3\x2\x2\x2\x9A\x3CC\x3"+
		"\x2\x2\x2\x9C\x3D5\x3\x2\x2\x2\x9E\x3E8\x3\x2\x2\x2\xA0\x3F6\x3\x2\x2"+
		"\x2\xA2\x3FA\x3\x2\x2\x2\xA4\x3FF\x3\x2\x2\x2\xA6\x407\x3\x2\x2\x2\xA8"+
		"\x409\x3\x2\x2\x2\xAA\x40D\x3\x2\x2\x2\xAC\x415\x3\x2\x2\x2\xAE\x417\x3"+
		"\x2\x2\x2\xB0\x426\x3\x2\x2\x2\xB2\x495\x3\x2\x2\x2\xB4\x4A0\x3\x2\x2"+
		"\x2\xB6\x4B1\x3\x2\x2\x2\xB8\x4B3\x3\x2\x2\x2\xBA\x4B9\x3\x2\x2\x2\xBC"+
		"\x4D7\x3\x2\x2\x2\xBE\x4DB\x3\x2\x2\x2\xC0\x4DE\x3\x2\x2\x2\xC2\x4E5\x3"+
		"\x2\x2\x2\xC4\x4EA\x3\x2\x2\x2\xC6\x4F2\x3\x2\x2\x2\xC8\x4F8\x3\x2\x2"+
		"\x2\xCA\x4FA\x3\x2\x2\x2\xCC\xCE\x5\x4\x3\x2\xCD\xCC\x3\x2\x2\x2\xCD\xCE"+
		"\x3\x2\x2\x2\xCE\xD2\x3\x2\x2\x2\xCF\xD1\x5\x6\x4\x2\xD0\xCF\x3\x2\x2"+
		"\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD8"+
		"\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD7\x5\b\x5\x2\xD6\xD5\x3\x2\x2\x2"+
		"\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDB\x3"+
		"\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDC\a\x2\x2\x3\xDC\x3\x3\x2\x2\x2\xDD"+
		"\xDF\x5j\x36\x2\xDE\xDD\x3\x2\x2\x2\xDF\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2"+
		"\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3"+
		"\xE4\a\"\x2\x2\xE4\xE5\x5\x66\x34\x2\xE5\xE6\a\x41\x2\x2\xE6\x5\x3\x2"+
		"\x2\x2\xE7\xE9\a\x1B\x2\x2\xE8\xEA\a(\x2\x2\xE9\xE8\x3\x2\x2\x2\xE9\xEA"+
		"\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEE\x5\x66\x34\x2\xEC\xED\a\x43\x2"+
		"\x2\xED\xEF\aU\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\x3"+
		"\x2\x2\x2\xF0\xF1\a\x41\x2\x2\xF1\a\x3\x2\x2\x2\xF2\xF4\x5\f\a\x2\xF3"+
		"\xF2\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2"+
		"\x2\x2\xF6\xF8\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\x110\x5\x10\t\x2\xF9"+
		"\xFB\x5\f\a\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC\xFA\x3\x2\x2"+
		"\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFF\x110"+
		"\x5\x18\r\x2\x100\x102\x5\f\a\x2\x101\x100\x3\x2\x2\x2\x102\x105\x3\x2"+
		"\x2\x2\x103\x101\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x106\x3\x2\x2"+
		"\x2\x105\x103\x3\x2\x2\x2\x106\x110\x5 \x11\x2\x107\x109\x5\f\a\x2\x108"+
		"\x107\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B"+
		"\x3\x2\x2\x2\x10B\x10D\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x110\x5"+
		"v<\x2\x10E\x110\a\x41\x2\x2\x10F\xF5\x3\x2\x2\x2\x10F\xFC\x3\x2\x2\x2"+
		"\x10F\x103\x3\x2\x2\x2\x10F\x10A\x3\x2\x2\x2\x10F\x10E\x3\x2\x2\x2\x110"+
		"\t\x3\x2\x2\x2\x111\x114\x5\f\a\x2\x112\x114\t\x2\x2\x2\x113\x111\x3\x2"+
		"\x2\x2\x113\x112\x3\x2\x2\x2\x114\v\x3\x2\x2\x2\x115\x118\x5j\x36\x2\x116"+
		"\x118\t\x3\x2\x2\x117\x115\x3\x2\x2\x2\x117\x116\x3\x2\x2\x2\x118\r\x3"+
		"\x2\x2\x2\x119\x11C\a\x14\x2\x2\x11A\x11C\x5j\x36\x2\x11B\x119\x3\x2\x2"+
		"\x2\x11B\x11A\x3\x2\x2\x2\x11C\xF\x3\x2\x2\x2\x11D\x11E\a\v\x2\x2\x11E"+
		"\x120\a\x66\x2\x2\x11F\x121\x5\x12\n\x2\x120\x11F\x3\x2\x2\x2\x120\x121"+
		"\x3\x2\x2\x2\x121\x124\x3\x2\x2\x2\x122\x123\a\x13\x2\x2\x123\x125\x5"+
		"N(\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x128\x3\x2\x2\x2"+
		"\x126\x127\a\x1A\x2\x2\x127\x129\x5\"\x12\x2\x128\x126\x3\x2\x2\x2\x128"+
		"\x129\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12B\x5$\x13\x2\x12B\x11"+
		"\x3\x2\x2\x2\x12C\x12D\a\x46\x2\x2\x12D\x132\x5\x14\v\x2\x12E\x12F\a\x42"+
		"\x2\x2\x12F\x131\x5\x14\v\x2\x130\x12E\x3\x2\x2\x2\x131\x134\x3\x2\x2"+
		"\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2"+
		"\x134\x132\x3\x2\x2\x2\x135\x136\a\x45\x2\x2\x136\x13\x3\x2\x2\x2\x137"+
		"\x13A\a\x66\x2\x2\x138\x139\a\x13\x2\x2\x139\x13B\x5\x16\f\x2\x13A\x138"+
		"\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x15\x3\x2\x2\x2\x13C\x141\x5N"+
		"(\x2\x13D\x13E\aW\x2\x2\x13E\x140\x5N(\x2\x13F\x13D\x3\x2\x2\x2\x140\x143"+
		"\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x17\x3\x2"+
		"\x2\x2\x143\x141\x3\x2\x2\x2\x144\x145\a\x12\x2\x2\x145\x148\a\x66\x2"+
		"\x2\x146\x147\a\x1A\x2\x2\x147\x149\x5\"\x12\x2\x148\x146\x3\x2\x2\x2"+
		"\x148\x149\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14C\a=\x2\x2\x14B\x14D"+
		"\x5\x1A\xE\x2\x14C\x14B\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14F\x3"+
		"\x2\x2\x2\x14E\x150\a\x42\x2\x2\x14F\x14E\x3\x2\x2\x2\x14F\x150\x3\x2"+
		"\x2\x2\x150\x152\x3\x2\x2\x2\x151\x153\x5\x1E\x10\x2\x152\x151\x3\x2\x2"+
		"\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155\a>\x2\x2\x155"+
		"\x19\x3\x2\x2\x2\x156\x15B\x5\x1C\xF\x2\x157\x158\a\x42\x2\x2\x158\x15A"+
		"\x5\x1C\xF\x2\x159\x157\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159\x3"+
		"\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x1B\x3\x2\x2\x2\x15D\x15B\x3\x2\x2"+
		"\x2\x15E\x160\x5j\x36\x2\x15F\x15E\x3\x2\x2\x2\x160\x163\x3\x2\x2\x2\x161"+
		"\x15F\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x164\x3\x2\x2\x2\x163\x161"+
		"\x3\x2\x2\x2\x164\x166\a\x66\x2\x2\x165\x167\x5\xCA\x66\x2\x166\x165\x3"+
		"\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\x169\x3\x2\x2\x2\x168\x16A\x5$\x13"+
		"\x2\x169\x168\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x1D\x3\x2\x2\x2\x16B"+
		"\x16F\a\x41\x2\x2\x16C\x16E\x5(\x15\x2\x16D\x16C\x3\x2\x2\x2\x16E\x171"+
		"\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x1F\x3\x2"+
		"\x2\x2\x171\x16F\x3\x2\x2\x2\x172\x173\a\x1E\x2\x2\x173\x175\a\x66\x2"+
		"\x2\x174\x176\x5\x12\n\x2\x175\x174\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2"+
		"\x176\x179\x3\x2\x2\x2\x177\x178\a\x13\x2\x2\x178\x17A\x5\"\x12\x2\x179"+
		"\x177\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17C"+
		"\x5&\x14\x2\x17C!\x3\x2\x2\x2\x17D\x182\x5N(\x2\x17E\x17F\a\x42\x2\x2"+
		"\x17F\x181\x5N(\x2\x180\x17E\x3\x2\x2\x2\x181\x184\x3\x2\x2\x2\x182\x180"+
		"\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183#\x3\x2\x2\x2\x184\x182\x3\x2\x2"+
		"\x2\x185\x189\a=\x2\x2\x186\x188\x5(\x15\x2\x187\x186\x3\x2\x2\x2\x188"+
		"\x18B\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18C"+
		"\x3\x2\x2\x2\x18B\x189\x3\x2\x2\x2\x18C\x18D\a>\x2\x2\x18D%\x3\x2\x2\x2"+
		"\x18E\x192\a=\x2\x2\x18F\x191\x5\x36\x1C\x2\x190\x18F\x3\x2\x2\x2\x191"+
		"\x194\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x195"+
		"\x3\x2\x2\x2\x194\x192\x3\x2\x2\x2\x195\x196\a>\x2\x2\x196\'\x3\x2\x2"+
		"\x2\x197\x1A4\a\x41\x2\x2\x198\x19A\a(\x2\x2\x199\x198\x3\x2\x2\x2\x199"+
		"\x19A\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x1A4\x5\x86\x44\x2\x19C\x19E"+
		"\x5\n\x6\x2\x19D\x19C\x3\x2\x2\x2\x19E\x1A1\x3\x2\x2\x2\x19F\x19D\x3\x2"+
		"\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A2\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2"+
		"\x2\x1A2\x1A4\x5*\x16\x2\x1A3\x197\x3\x2\x2\x2\x1A3\x199\x3\x2\x2\x2\x1A3"+
		"\x19F\x3\x2\x2\x2\x1A4)\x3\x2\x2\x2\x1A5\x1AF\x5,\x17\x2\x1A6\x1AF\x5"+
		".\x18\x2\x1A7\x1AF\x5\x34\x1B\x2\x1A8\x1AF\x5\x30\x19\x2\x1A9\x1AF\x5"+
		"\x32\x1A\x2\x1AA\x1AF\x5 \x11\x2\x1AB\x1AF\x5v<\x2\x1AC\x1AF\x5\x10\t"+
		"\x2\x1AD\x1AF\x5\x18\r\x2\x1AE\x1A5\x3\x2\x2\x2\x1AE\x1A6\x3\x2\x2\x2"+
		"\x1AE\x1A7\x3\x2\x2\x2\x1AE\x1A8\x3\x2\x2\x2\x1AE\x1A9\x3\x2\x2\x2\x1AE"+
		"\x1AA\x3\x2\x2\x2\x1AE\x1AB\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AD"+
		"\x3\x2\x2\x2\x1AF+\x3\x2\x2\x2\x1B0\x1B3\x5N(\x2\x1B1\x1B3\a\x32\x2\x2"+
		"\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4"+
		"\x1B5\a\x66\x2\x2\x1B5\x1BA\x5Z.\x2\x1B6\x1B7\a?\x2\x2\x1B7\x1B9\a@\x2"+
		"\x2\x1B8\x1B6\x3\x2\x2\x2\x1B9\x1BC\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2\x2"+
		"\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BF\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BD"+
		"\x1BE\a/\x2\x2\x1BE\x1C0\x5X-\x2\x1BF\x1BD\x3\x2\x2\x2\x1BF\x1C0\x3\x2"+
		"\x2\x2\x1C0\x1C3\x3\x2\x2\x2\x1C1\x1C4\x5\x62\x32\x2\x1C2\x1C4\a\x41\x2"+
		"\x2\x1C3\x1C1\x3\x2\x2\x2\x1C3\x1C2\x3\x2\x2\x2\x1C4-\x3\x2\x2\x2\x1C5"+
		"\x1C6\x5\x12\n\x2\x1C6\x1C7\x5,\x17\x2\x1C7/\x3\x2\x2\x2\x1C8\x1C9\a\x66"+
		"\x2\x2\x1C9\x1CC\x5Z.\x2\x1CA\x1CB\a/\x2\x2\x1CB\x1CD\x5X-\x2\x1CC\x1CA"+
		"\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x5"+
		"\x64\x33\x2\x1CF\x31\x3\x2\x2\x2\x1D0\x1D1\x5\x12\n\x2\x1D1\x1D2\x5\x30"+
		"\x19\x2\x1D2\x33\x3\x2\x2\x2\x1D3\x1D4\x5N(\x2\x1D4\x1D5\x5\x42\"\x2\x1D5"+
		"\x1D6\a\x41\x2\x2\x1D6\x35\x3\x2\x2\x2\x1D7\x1D9\x5\n\x6\x2\x1D8\x1D7"+
		"\x3\x2\x2\x2\x1D9\x1DC\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2\x2\x1DA\x1DB\x3"+
		"\x2\x2\x2\x1DB\x1DD\x3\x2\x2\x2\x1DC\x1DA\x3\x2\x2\x2\x1DD\x1E0\x5\x38"+
		"\x1D\x2\x1DE\x1E0\a\x41\x2\x2\x1DF\x1DA\x3\x2\x2\x2\x1DF\x1DE\x3\x2\x2"+
		"\x2\x1E0\x37\x3\x2\x2\x2\x1E1\x1E9\x5:\x1E\x2\x1E2\x1E9\x5> \x2\x1E3\x1E9"+
		"\x5@!\x2\x1E4\x1E9\x5 \x11\x2\x1E5\x1E9\x5v<\x2\x1E6\x1E9\x5\x10\t\x2"+
		"\x1E7\x1E9\x5\x18\r\x2\x1E8\x1E1\x3\x2\x2\x2\x1E8\x1E2\x3\x2\x2\x2\x1E8"+
		"\x1E3\x3\x2\x2\x2\x1E8\x1E4\x3\x2\x2\x2\x1E8\x1E5\x3\x2\x2\x2\x1E8\x1E6"+
		"\x3\x2\x2\x2\x1E8\x1E7\x3\x2\x2\x2\x1E9\x39\x3\x2\x2\x2\x1EA\x1EB\x5N"+
		"(\x2\x1EB\x1F0\x5<\x1F\x2\x1EC\x1ED\a\x42\x2\x2\x1ED\x1EF\x5<\x1F\x2\x1EE"+
		"\x1EC\x3\x2\x2\x2\x1EF\x1F2\x3\x2\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F0\x1F1"+
		"\x3\x2\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2\x1F3\x1F4\a\x41"+
		"\x2\x2\x1F4;\x3\x2\x2\x2\x1F5\x1FA\a\x66\x2\x2\x1F6\x1F7\a?\x2\x2\x1F7"+
		"\x1F9\a@\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F9\x1FC\x3\x2\x2\x2\x1FA\x1F8\x3"+
		"\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB\x1FD\x3\x2\x2\x2\x1FC\x1FA\x3\x2"+
		"\x2\x2\x1FD\x1FE\a\x44\x2\x2\x1FE\x1FF\x5H%\x2\x1FF=\x3\x2\x2\x2\x200"+
		"\x203\x5N(\x2\x201\x203\a\x32\x2\x2\x202\x200\x3\x2\x2\x2\x202\x201\x3"+
		"\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\a\x66\x2\x2\x205\x20A\x5Z.\x2"+
		"\x206\x207\a?\x2\x2\x207\x209\a@\x2\x2\x208\x206\x3\x2\x2\x2\x209\x20C"+
		"\x3\x2\x2\x2\x20A\x208\x3\x2\x2\x2\x20A\x20B\x3\x2\x2\x2\x20B\x20F\x3"+
		"\x2\x2\x2\x20C\x20A\x3\x2\x2\x2\x20D\x20E\a/\x2\x2\x20E\x210\x5X-\x2\x20F"+
		"\x20D\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x212"+
		"\a\x41\x2\x2\x212?\x3\x2\x2\x2\x213\x214\x5\x12\n\x2\x214\x215\x5> \x2"+
		"\x215\x41\x3\x2\x2\x2\x216\x21B\x5\x44#\x2\x217\x218\a\x42\x2\x2\x218"+
		"\x21A\x5\x44#\x2\x219\x217\x3\x2\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B\x219"+
		"\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C\x43\x3\x2\x2\x2\x21D\x21B\x3\x2"+
		"\x2\x2\x21E\x221\x5\x46$\x2\x21F\x220\a\x44\x2\x2\x220\x222\x5H%\x2\x221"+
		"\x21F\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x45\x3\x2\x2\x2\x223\x228"+
		"\a\x66\x2\x2\x224\x225\a?\x2\x2\x225\x227\a@\x2\x2\x226\x224\x3\x2\x2"+
		"\x2\x227\x22A\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2"+
		"\x229G\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22B\x22E\x5J&\x2\x22C\x22E\x5"+
		"\xB0Y\x2\x22D\x22B\x3\x2\x2\x2\x22D\x22C\x3\x2\x2\x2\x22EI\x3\x2\x2\x2"+
		"\x22F\x23B\a=\x2\x2\x230\x235\x5H%\x2\x231\x232\a\x42\x2\x2\x232\x234"+
		"\x5H%\x2\x233\x231\x3\x2\x2\x2\x234\x237\x3\x2\x2\x2\x235\x233\x3\x2\x2"+
		"\x2\x235\x236\x3\x2\x2\x2\x236\x239\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2"+
		"\x238\x23A\a\x42\x2\x2\x239\x238\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A"+
		"\x23C\x3\x2\x2\x2\x23B\x230\x3\x2\x2\x2\x23B\x23C\x3\x2\x2\x2\x23C\x23D"+
		"\x3\x2\x2\x2\x23D\x23E\a>\x2\x2\x23EK\x3\x2\x2\x2\x23F\x240\a\x66\x2\x2"+
		"\x240M\x3\x2\x2\x2\x241\x246\x5P)\x2\x242\x243\a?\x2\x2\x243\x245\a@\x2"+
		"\x2\x244\x242\x3\x2\x2\x2\x245\x248\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2"+
		"\x246\x247\x3\x2\x2\x2\x247\x252\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x249"+
		"\x24E\x5R*\x2\x24A\x24B\a?\x2\x2\x24B\x24D\a@\x2\x2\x24C\x24A\x3\x2\x2"+
		"\x2\x24D\x250\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2"+
		"\x24F\x252\x3\x2\x2\x2\x250\x24E\x3\x2\x2\x2\x251\x241\x3\x2\x2\x2\x251"+
		"\x249\x3\x2\x2\x2\x252O\x3\x2\x2\x2\x253\x255\a\x66\x2\x2\x254\x256\x5"+
		"T+\x2\x255\x254\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x25E\x3\x2\x2\x2"+
		"\x257\x258\a\x43\x2\x2\x258\x25A\a\x66\x2\x2\x259\x25B\x5T+\x2\x25A\x259"+
		"\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25D\x3\x2\x2\x2\x25C\x257\x3"+
		"\x2\x2\x2\x25D\x260\x3\x2\x2\x2\x25E\x25C\x3\x2\x2\x2\x25E\x25F\x3\x2"+
		"\x2\x2\x25FQ\x3\x2\x2\x2\x260\x25E\x3\x2\x2\x2\x261\x262\t\x4\x2\x2\x262"+
		"S\x3\x2\x2\x2\x263\x264\a\x46\x2\x2\x264\x269\x5V,\x2\x265\x266\a\x42"+
		"\x2\x2\x266\x268\x5V,\x2\x267\x265\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269"+
		"\x267\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26C\x3\x2\x2\x2\x26B\x269"+
		"\x3\x2\x2\x2\x26C\x26D\a\x45\x2\x2\x26DU\x3\x2\x2\x2\x26E\x275\x5N(\x2"+
		"\x26F\x272\aI\x2\x2\x270\x271\t\x5\x2\x2\x271\x273\x5N(\x2\x272\x270\x3"+
		"\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x275\x3\x2\x2\x2\x274\x26E\x3\x2"+
		"\x2\x2\x274\x26F\x3\x2\x2\x2\x275W\x3\x2\x2\x2\x276\x27B\x5\x66\x34\x2"+
		"\x277\x278\a\x42\x2\x2\x278\x27A\x5\x66\x34\x2\x279\x277\x3\x2\x2\x2\x27A"+
		"\x27D\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2\x27CY\x3"+
		"\x2\x2\x2\x27D\x27B\x3\x2\x2\x2\x27E\x280\a;\x2\x2\x27F\x281\x5\\/\x2"+
		"\x280\x27F\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282"+
		"\x283\a<\x2\x2\x283[\x3\x2\x2\x2\x284\x289\x5^\x30\x2\x285\x286\a\x42"+
		"\x2\x2\x286\x288\x5^\x30\x2\x287\x285\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2"+
		"\x289\x287\x3\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A\x28E\x3\x2\x2\x2\x28B"+
		"\x289\x3\x2\x2\x2\x28C\x28D\a\x42\x2\x2\x28D\x28F\x5`\x31\x2\x28E\x28C"+
		"\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x292\x3\x2\x2\x2\x290\x292\x5"+
		"`\x31\x2\x291\x284\x3\x2\x2\x2\x291\x290\x3\x2\x2\x2\x292]\x3\x2\x2\x2"+
		"\x293\x295\x5\xE\b\x2\x294\x293\x3\x2\x2\x2\x295\x298\x3\x2\x2\x2\x296"+
		"\x294\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x299\x3\x2\x2\x2\x298\x296"+
		"\x3\x2\x2\x2\x299\x29A\x5N(\x2\x29A\x29B\x5\x46$\x2\x29B_\x3\x2\x2\x2"+
		"\x29C\x29E\x5\xE\b\x2\x29D\x29C\x3\x2\x2\x2\x29E\x2A1\x3\x2\x2\x2\x29F"+
		"\x29D\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A2\x3\x2\x2\x2\x2A1\x29F"+
		"\x3\x2\x2\x2\x2A2\x2A3\x5N(\x2\x2A3\x2A4\ah\x2\x2\x2A4\x2A5\x5\x46$\x2"+
		"\x2A5\x61\x3\x2\x2\x2\x2A6\x2A7\x5\x86\x44\x2\x2A7\x63\x3\x2\x2\x2\x2A8"+
		"\x2A9\x5\x86\x44\x2\x2A9\x65\x3\x2\x2\x2\x2AA\x2AF\a\x66\x2\x2\x2AB\x2AC"+
		"\a\x43\x2\x2\x2AC\x2AE\a\x66\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AE\x2B1\x3"+
		"\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2\x2AF\x2B0\x3\x2\x2\x2\x2B0g\x3\x2\x2\x2"+
		"\x2B1\x2AF\x3\x2\x2\x2\x2B2\x2B3\t\x6\x2\x2\x2B3i\x3\x2\x2\x2\x2B4\x2B5"+
		"\ag\x2\x2\x2B5\x2BC\x5l\x37\x2\x2B6\x2B9\a;\x2\x2\x2B7\x2BA\x5n\x38\x2"+
		"\x2B8\x2BA\x5r:\x2\x2B9\x2B7\x3\x2\x2\x2\x2B9\x2B8\x3\x2\x2\x2\x2B9\x2BA"+
		"\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BD\a<\x2\x2\x2BC\x2B6\x3\x2"+
		"\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BDk\x3\x2\x2\x2\x2BE\x2BF\x5\x66\x34\x2"+
		"\x2BFm\x3\x2\x2\x2\x2C0\x2C5\x5p\x39\x2\x2C1\x2C2\a\x42\x2\x2\x2C2\x2C4"+
		"\x5p\x39\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4\x2C7\x3\x2\x2\x2\x2C5\x2C3\x3\x2"+
		"\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6o\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C8"+
		"\x2C9\a\x66\x2\x2\x2C9\x2CA\a\x44\x2\x2\x2CA\x2CB\x5r:\x2\x2CBq\x3\x2"+
		"\x2\x2\x2CC\x2D0\x5\xB0Y\x2\x2CD\x2D0\x5j\x36\x2\x2CE\x2D0\x5t;\x2\x2CF"+
		"\x2CC\x3\x2\x2\x2\x2CF\x2CD\x3\x2\x2\x2\x2CF\x2CE\x3\x2\x2\x2\x2D0s\x3"+
		"\x2\x2\x2\x2D1\x2DA\a=\x2\x2\x2D2\x2D7\x5r:\x2\x2D3\x2D4\a\x42\x2\x2\x2D4"+
		"\x2D6\x5r:\x2\x2D5\x2D3\x3\x2\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7\x2D5\x3"+
		"\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2DB\x3\x2\x2\x2\x2D9\x2D7\x3\x2"+
		"\x2\x2\x2DA\x2D2\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DD\x3\x2\x2"+
		"\x2\x2DC\x2DE\a\x42\x2\x2\x2DD\x2DC\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2"+
		"\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2E0\a>\x2\x2\x2E0u\x3\x2\x2\x2\x2E1\x2E2"+
		"\ag\x2\x2\x2E2\x2E3\a\x1E\x2\x2\x2E3\x2E4\a\x66\x2\x2\x2E4\x2E5\x5x=\x2"+
		"\x2E5w\x3\x2\x2\x2\x2E6\x2EA\a=\x2\x2\x2E7\x2E9\x5z>\x2\x2E8\x2E7\x3\x2"+
		"\x2\x2\x2E9\x2EC\x3\x2\x2\x2\x2EA\x2E8\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2"+
		"\x2\x2EB\x2ED\x3\x2\x2\x2\x2EC\x2EA\x3\x2\x2\x2\x2ED\x2EE\a>\x2\x2\x2EE"+
		"y\x3\x2\x2\x2\x2EF\x2F1\x5\n\x6\x2\x2F0\x2EF\x3\x2\x2\x2\x2F1\x2F4\x3"+
		"\x2\x2\x2\x2F2\x2F0\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F5\x3\x2"+
		"\x2\x2\x2F4\x2F2\x3\x2\x2\x2\x2F5\x2F8\x5|?\x2\x2F6\x2F8\a\x41\x2\x2\x2F7"+
		"\x2F2\x3\x2\x2\x2\x2F7\x2F6\x3\x2\x2\x2\x2F8{\x3\x2\x2\x2\x2F9\x2FA\x5"+
		"N(\x2\x2FA\x2FB\x5~@\x2\x2FB\x2FC\a\x41\x2\x2\x2FC\x30E\x3\x2\x2\x2\x2FD"+
		"\x2FF\x5\x10\t\x2\x2FE\x300\a\x41\x2\x2\x2FF\x2FE\x3\x2\x2\x2\x2FF\x300"+
		"\x3\x2\x2\x2\x300\x30E\x3\x2\x2\x2\x301\x303\x5 \x11\x2\x302\x304\a\x41"+
		"\x2\x2\x303\x302\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x30E\x3\x2\x2"+
		"\x2\x305\x307\x5\x18\r\x2\x306\x308\a\x41\x2\x2\x307\x306\x3\x2\x2\x2"+
		"\x307\x308\x3\x2\x2\x2\x308\x30E\x3\x2\x2\x2\x309\x30B\x5v<\x2\x30A\x30C"+
		"\a\x41\x2\x2\x30B\x30A\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30E\x3"+
		"\x2\x2\x2\x30D\x2F9\x3\x2\x2\x2\x30D\x2FD\x3\x2\x2\x2\x30D\x301\x3\x2"+
		"\x2\x2\x30D\x305\x3\x2\x2\x2\x30D\x309\x3\x2\x2\x2\x30E}\x3\x2\x2\x2\x30F"+
		"\x312\x5\x80\x41\x2\x310\x312\x5\x82\x42\x2\x311\x30F\x3\x2\x2\x2\x311"+
		"\x310\x3\x2\x2\x2\x312\x7F\x3\x2\x2\x2\x313\x314\a\x66\x2\x2\x314\x315"+
		"\a;\x2\x2\x315\x317\a<\x2\x2\x316\x318\x5\x84\x43\x2\x317\x316\x3\x2\x2"+
		"\x2\x317\x318\x3\x2\x2\x2\x318\x81\x3\x2\x2\x2\x319\x31A\x5\x42\"\x2\x31A"+
		"\x83\x3\x2\x2\x2\x31B\x31C\a\xE\x2\x2\x31C\x31D\x5r:\x2\x31D\x85\x3\x2"+
		"\x2\x2\x31E\x322\a=\x2\x2\x31F\x321\x5\x88\x45\x2\x320\x31F\x3\x2\x2\x2"+
		"\x321\x324\x3\x2\x2\x2\x322\x320\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2\x323"+
		"\x325\x3\x2\x2\x2\x324\x322\x3\x2\x2\x2\x325\x326\a>\x2\x2\x326\x87\x3"+
		"\x2\x2\x2\x327\x32B\x5\x8A\x46\x2\x328\x32B\x5\x8EH\x2\x329\x32B\x5\b"+
		"\x5\x2\x32A\x327\x3\x2\x2\x2\x32A\x328\x3\x2\x2\x2\x32A\x329\x3\x2\x2"+
		"\x2\x32B\x89\x3\x2\x2\x2\x32C\x32D\x5\x8CG\x2\x32D\x32E\a\x41\x2\x2\x32E"+
		"\x8B\x3\x2\x2\x2\x32F\x331\x5\xE\b\x2\x330\x32F\x3\x2\x2\x2\x331\x334"+
		"\x3\x2\x2\x2\x332\x330\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x335\x3"+
		"\x2\x2\x2\x334\x332\x3\x2\x2\x2\x335\x336\x5N(\x2\x336\x337\x5\x42\"\x2"+
		"\x337\x8D\x3\x2\x2\x2\x338\x3A1\x5\x86\x44\x2\x339\x33A\a\x4\x2\x2\x33A"+
		"\x33D\x5\xB0Y\x2\x33B\x33C\aJ\x2\x2\x33C\x33E\x5\xB0Y\x2\x33D\x33B\x3"+
		"\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x340\a\x41"+
		"\x2\x2\x340\x3A1\x3\x2\x2\x2\x341\x342\a\x18\x2\x2\x342\x343\x5\xA8U\x2"+
		"\x343\x346\x5\x8EH\x2\x344\x345\a\x11\x2\x2\x345\x347\x5\x8EH\x2\x346"+
		"\x344\x3\x2\x2\x2\x346\x347\x3\x2\x2\x2\x347\x3A1\x3\x2\x2\x2\x348\x349"+
		"\a\x17\x2\x2\x349\x34A\a;\x2\x2\x34A\x34B\x5\xA0Q\x2\x34B\x34C\a<\x2\x2"+
		"\x34C\x34D\x5\x8EH\x2\x34D\x3A1\x3\x2\x2\x2\x34E\x34F\a\x34\x2\x2\x34F"+
		"\x350\x5\xA8U\x2\x350\x351\x5\x8EH\x2\x351\x3A1\x3\x2\x2\x2\x352\x353"+
		"\a\xF\x2\x2\x353\x354\x5\x8EH\x2\x354\x355\a\x34\x2\x2\x355\x356\x5\xA8"+
		"U\x2\x356\x357\a\x41\x2\x2\x357\x3A1\x3\x2\x2\x2\x358\x359\a\x31\x2\x2"+
		"\x359\x363\x5\x86\x44\x2\x35A\x35C\x5\x90I\x2\x35B\x35A\x3\x2\x2\x2\x35C"+
		"\x35D\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E\x360"+
		"\x3\x2\x2\x2\x35F\x361\x5\x94K\x2\x360\x35F\x3\x2\x2\x2\x360\x361\x3\x2"+
		"\x2\x2\x361\x364\x3\x2\x2\x2\x362\x364\x5\x94K\x2\x363\x35B\x3\x2\x2\x2"+
		"\x363\x362\x3\x2\x2\x2\x364\x3A1\x3\x2\x2\x2\x365\x366\a\x31\x2\x2\x366"+
		"\x367\x5\x96L\x2\x367\x36B\x5\x86\x44\x2\x368\x36A\x5\x90I\x2\x369\x368"+
		"\x3\x2\x2\x2\x36A\x36D\x3\x2\x2\x2\x36B\x369\x3\x2\x2\x2\x36B\x36C\x3"+
		"\x2\x2\x2\x36C\x36F\x3\x2\x2\x2\x36D\x36B\x3\x2\x2\x2\x36E\x370\x5\x94"+
		"K\x2\x36F\x36E\x3\x2\x2\x2\x36F\x370\x3\x2\x2\x2\x370\x3A1\x3\x2\x2\x2"+
		"\x371\x372\a+\x2\x2\x372\x373\x5\xA8U\x2\x373\x377\a=\x2\x2\x374\x376"+
		"\x5\x9CO\x2\x375\x374\x3\x2\x2\x2\x376\x379\x3\x2\x2\x2\x377\x375\x3\x2"+
		"\x2\x2\x377\x378\x3\x2\x2\x2\x378\x37D\x3\x2\x2\x2\x379\x377\x3\x2\x2"+
		"\x2\x37A\x37C\x5\x9EP\x2\x37B\x37A\x3\x2\x2\x2\x37C\x37F\x3\x2\x2\x2\x37D"+
		"\x37B\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x380\x3\x2\x2\x2\x37F\x37D"+
		"\x3\x2\x2\x2\x380\x381\a>\x2\x2\x381\x3A1\x3\x2\x2\x2\x382\x383\a,\x2"+
		"\x2\x383\x384\x5\xA8U\x2\x384\x385\x5\x86\x44\x2\x385\x3A1\x3\x2\x2\x2"+
		"\x386\x388\a&\x2\x2\x387\x389\x5\xB0Y\x2\x388\x387\x3\x2\x2\x2\x388\x389"+
		"\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2\x38A\x3A1\a\x41\x2\x2\x38B\x38C\a."+
		"\x2\x2\x38C\x38D\x5\xB0Y\x2\x38D\x38E\a\x41\x2\x2\x38E\x3A1\x3\x2\x2\x2"+
		"\x38F\x391\a\x6\x2\x2\x390\x392\a\x66\x2\x2\x391\x390\x3\x2\x2\x2\x391"+
		"\x392\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x3A1\a\x41\x2\x2\x394\x396"+
		"\a\r\x2\x2\x395\x397\a\x66\x2\x2\x396\x395\x3\x2\x2\x2\x396\x397\x3\x2"+
		"\x2\x2\x397\x398\x3\x2\x2\x2\x398\x3A1\a\x41\x2\x2\x399\x3A1\a\x41\x2"+
		"\x2\x39A\x39B\x5\xACW\x2\x39B\x39C\a\x41\x2\x2\x39C\x3A1\x3\x2\x2\x2\x39D"+
		"\x39E\a\x66\x2\x2\x39E\x39F\aJ\x2\x2\x39F\x3A1\x5\x8EH\x2\x3A0\x338\x3"+
		"\x2\x2\x2\x3A0\x339\x3\x2\x2\x2\x3A0\x341\x3\x2\x2\x2\x3A0\x348\x3\x2"+
		"\x2\x2\x3A0\x34E\x3\x2\x2\x2\x3A0\x352\x3\x2\x2\x2\x3A0\x358\x3\x2\x2"+
		"\x2\x3A0\x365\x3\x2\x2\x2\x3A0\x371\x3\x2\x2\x2\x3A0\x382\x3\x2\x2\x2"+
		"\x3A0\x386\x3\x2\x2\x2\x3A0\x38B\x3\x2\x2\x2\x3A0\x38F\x3\x2\x2\x2\x3A0"+
		"\x394\x3\x2\x2\x2\x3A0\x399\x3\x2\x2\x2\x3A0\x39A\x3\x2\x2\x2\x3A0\x39D"+
		"\x3\x2\x2\x2\x3A1\x8F\x3\x2\x2\x2\x3A2\x3A3\a\t\x2\x2\x3A3\x3A7\a;\x2"+
		"\x2\x3A4\x3A6\x5\xE\b\x2\x3A5\x3A4\x3\x2\x2\x2\x3A6\x3A9\x3\x2\x2\x2\x3A7"+
		"\x3A5\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3AA\x3\x2\x2\x2\x3A9\x3A7"+
		"\x3\x2\x2\x2\x3AA\x3AB\x5\x92J\x2\x3AB\x3AC\a\x66\x2\x2\x3AC\x3AD\a<\x2"+
		"\x2\x3AD\x3AE\x5\x86\x44\x2\x3AE\x91\x3\x2\x2\x2\x3AF\x3B4\x5\x66\x34"+
		"\x2\x3B0\x3B1\aX\x2\x2\x3B1\x3B3\x5\x66\x34\x2\x3B2\x3B0\x3\x2\x2\x2\x3B3"+
		"\x3B6\x3\x2\x2\x2\x3B4\x3B2\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x93"+
		"\x3\x2\x2\x2\x3B6\x3B4\x3\x2\x2\x2\x3B7\x3B8\a\x15\x2\x2\x3B8\x3B9\x5"+
		"\x86\x44\x2\x3B9\x95\x3\x2\x2\x2\x3BA\x3BB\a;\x2\x2\x3BB\x3BD\x5\x98M"+
		"\x2\x3BC\x3BE\a\x41\x2\x2\x3BD\x3BC\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2"+
		"\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\a<\x2\x2\x3C0\x97\x3\x2\x2\x2\x3C1\x3C6"+
		"\x5\x9AN\x2\x3C2\x3C3\a\x41\x2\x2\x3C3\x3C5\x5\x9AN\x2\x3C4\x3C2\x3\x2"+
		"\x2\x2\x3C5\x3C8\x3\x2\x2\x2\x3C6\x3C4\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2"+
		"\x2\x3C7\x99\x3\x2\x2\x2\x3C8\x3C6\x3\x2\x2\x2\x3C9\x3CB\x5\xE\b\x2\x3CA"+
		"\x3C9\x3\x2\x2\x2\x3CB\x3CE\x3\x2\x2\x2\x3CC\x3CA\x3\x2\x2\x2\x3CC\x3CD"+
		"\x3\x2\x2\x2\x3CD\x3CF\x3\x2\x2\x2\x3CE\x3CC\x3\x2\x2\x2\x3CF\x3D0\x5"+
		"P)\x2\x3D0\x3D1\x5\x46$\x2\x3D1\x3D2\a\x44\x2\x2\x3D2\x3D3\x5\xB0Y\x2"+
		"\x3D3\x9B\x3\x2\x2\x2\x3D4\x3D6\x5\x9EP\x2\x3D5\x3D4\x3\x2\x2\x2\x3D6"+
		"\x3D7\x3\x2\x2\x2\x3D7\x3D5\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3DA"+
		"\x3\x2\x2\x2\x3D9\x3DB\x5\x88\x45\x2\x3DA\x3D9\x3\x2\x2\x2\x3DB\x3DC\x3"+
		"\x2\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x9D\x3\x2\x2"+
		"\x2\x3DE\x3DF\a\b\x2\x2\x3DF\x3E0\x5\xAEX\x2\x3E0\x3E1\aJ\x2\x2\x3E1\x3E9"+
		"\x3\x2\x2\x2\x3E2\x3E3\a\b\x2\x2\x3E3\x3E4\x5L\'\x2\x3E4\x3E5\aJ\x2\x2"+
		"\x3E5\x3E9\x3\x2\x2\x2\x3E6\x3E7\a\xE\x2\x2\x3E7\x3E9\aJ\x2\x2\x3E8\x3DE"+
		"\x3\x2\x2\x2\x3E8\x3E2\x3\x2\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E9\x9F\x3\x2"+
		"\x2\x2\x3EA\x3F7\x5\xA4S\x2\x3EB\x3ED\x5\xA2R\x2\x3EC\x3EB\x3\x2\x2\x2"+
		"\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3F0\a\x41\x2\x2\x3EF"+
		"\x3F1\x5\xB0Y\x2\x3F0\x3EF\x3\x2\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F2"+
		"\x3\x2\x2\x2\x3F2\x3F4\a\x41\x2\x2\x3F3\x3F5\x5\xA6T\x2\x3F4\x3F3\x3\x2"+
		"\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5\x3F7\x3\x2\x2\x2\x3F6\x3EA\x3\x2\x2"+
		"\x2\x3F6\x3EC\x3\x2\x2\x2\x3F7\xA1\x3\x2\x2\x2\x3F8\x3FB\x5\x8CG\x2\x3F9"+
		"\x3FB\x5\xAAV\x2\x3FA\x3F8\x3\x2\x2\x2\x3FA\x3F9\x3\x2\x2\x2\x3FB\xA3"+
		"\x3\x2\x2\x2\x3FC\x3FE\x5\xE\b\x2\x3FD\x3FC\x3\x2\x2\x2\x3FE\x401\x3\x2"+
		"\x2\x2\x3FF\x3FD\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400\x402\x3\x2\x2"+
		"\x2\x401\x3FF\x3\x2\x2\x2\x402\x403\x5N(\x2\x403\x404\x5\x46$\x2\x404"+
		"\x405\aJ\x2\x2\x405\x406\x5\xB0Y\x2\x406\xA5\x3\x2\x2\x2\x407\x408\x5"+
		"\xAAV\x2\x408\xA7\x3\x2\x2\x2\x409\x40A\a;\x2\x2\x40A\x40B\x5\xB0Y\x2"+
		"\x40B\x40C\a<\x2\x2\x40C\xA9\x3\x2\x2\x2\x40D\x412\x5\xB0Y\x2\x40E\x40F"+
		"\a\x42\x2\x2\x40F\x411\x5\xB0Y\x2\x410\x40E\x3\x2\x2\x2\x411\x414\x3\x2"+
		"\x2\x2\x412\x410\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413\xAB\x3\x2\x2\x2"+
		"\x414\x412\x3\x2\x2\x2\x415\x416\x5\xB0Y\x2\x416\xAD\x3\x2\x2\x2\x417"+
		"\x418\x5\xB0Y\x2\x418\xAF\x3\x2\x2\x2\x419\x41A\bY\x1\x2\x41A\x41B\a;"+
		"\x2\x2\x41B\x41C\x5N(\x2\x41C\x41D\a<\x2\x2\x41D\x41E\x5\xB0Y\x13\x41E"+
		"\x427\x3\x2\x2\x2\x41F\x420\t\a\x2\x2\x420\x427\x5\xB0Y\x11\x421\x422"+
		"\t\b\x2\x2\x422\x427\x5\xB0Y\x10\x423\x427\x5\xB2Z\x2\x424\x425\a!\x2"+
		"\x2\x425\x427\x5\xB4[\x2\x426\x419\x3\x2\x2\x2\x426\x41F\x3\x2\x2\x2\x426"+
		"\x421\x3\x2\x2\x2\x426\x423\x3\x2\x2\x2\x426\x424\x3\x2\x2\x2\x427\x47D"+
		"\x3\x2\x2\x2\x428\x429\f\xF\x2\x2\x429\x42A\t\t\x2\x2\x42A\x47C\x5\xB0"+
		"Y\x10\x42B\x42C\f\xE\x2\x2\x42C\x42D\t\n\x2\x2\x42D\x47C\x5\xB0Y\xF\x42E"+
		"\x436\f\r\x2\x2\x42F\x430\a\x46\x2\x2\x430\x437\a\x46\x2\x2\x431\x432"+
		"\a\x45\x2\x2\x432\x433\a\x45\x2\x2\x433\x437\a\x45\x2\x2\x434\x435\a\x45"+
		"\x2\x2\x435\x437\a\x45\x2\x2\x436\x42F\x3\x2\x2\x2\x436\x431\x3\x2\x2"+
		"\x2\x436\x434\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\x47C\x5\xB0Y\xE\x439"+
		"\x43A\f\f\x2\x2\x43A\x43B\t\v\x2\x2\x43B\x47C\x5\xB0Y\r\x43C\x43D\f\n"+
		"\x2\x2\x43D\x43E\t\f\x2\x2\x43E\x47C\x5\xB0Y\v\x43F\x440\f\t\x2\x2\x440"+
		"\x441\aW\x2\x2\x441\x47C\x5\xB0Y\n\x442\x443\f\b\x2\x2\x443\x444\aY\x2"+
		"\x2\x444\x47C\x5\xB0Y\t\x445\x446\f\a\x2\x2\x446\x447\aX\x2\x2\x447\x47C"+
		"\x5\xB0Y\b\x448\x449\f\x6\x2\x2\x449\x44A\aO\x2\x2\x44A\x47C\x5\xB0Y\a"+
		"\x44B\x44C\f\x5\x2\x2\x44C\x44D\aP\x2\x2\x44D\x47C\x5\xB0Y\x6\x44E\x44F"+
		"\f\x4\x2\x2\x44F\x450\aI\x2\x2\x450\x451\x5\xB0Y\x2\x451\x452\aJ\x2\x2"+
		"\x452\x453\x5\xB0Y\x5\x453\x47C\x3\x2\x2\x2\x454\x455\f\x3\x2\x2\x455"+
		"\x456\t\r\x2\x2\x456\x47C\x5\xB0Y\x3\x457\x458\f\x1B\x2\x2\x458\x459\a"+
		"\x43\x2\x2\x459\x47C\a\x66\x2\x2\x45A\x45B\f\x1A\x2\x2\x45B\x45C\a\x43"+
		"\x2\x2\x45C\x47C\a-\x2\x2\x45D\x45E\f\x19\x2\x2\x45E\x45F\a\x43\x2\x2"+
		"\x45F\x461\a!\x2\x2\x460\x462\x5\xC0\x61\x2\x461\x460\x3\x2\x2\x2\x461"+
		"\x462\x3\x2\x2\x2\x462\x463\x3\x2\x2\x2\x463\x47C\x5\xB8]\x2\x464\x465"+
		"\f\x18\x2\x2\x465\x466\a\x43\x2\x2\x466\x467\a*\x2\x2\x467\x47C\x5\xC6"+
		"\x64\x2\x468\x469\f\x17\x2\x2\x469\x46A\a\x43\x2\x2\x46A\x47C\x5\xBE`"+
		"\x2\x46B\x46C\f\x16\x2\x2\x46C\x46D\a?\x2\x2\x46D\x46E\x5\xB0Y\x2\x46E"+
		"\x46F\a@\x2\x2\x46F\x47C\x3\x2\x2\x2\x470\x471\f\x15\x2\x2\x471\x473\a"+
		";\x2\x2\x472\x474\x5\xAAV\x2\x473\x472\x3\x2\x2\x2\x473\x474\x3\x2\x2"+
		"\x2\x474\x475\x3\x2\x2\x2\x475\x47C\a<\x2\x2\x476\x477\f\x12\x2\x2\x477"+
		"\x47C\t\xE\x2\x2\x478\x479\f\v\x2\x2\x479\x47A\a\x1C\x2\x2\x47A\x47C\x5"+
		"N(\x2\x47B\x428\x3\x2\x2\x2\x47B\x42B\x3\x2\x2\x2\x47B\x42E\x3\x2\x2\x2"+
		"\x47B\x439\x3\x2\x2\x2\x47B\x43C\x3\x2\x2\x2\x47B\x43F\x3\x2\x2\x2\x47B"+
		"\x442\x3\x2\x2\x2\x47B\x445\x3\x2\x2\x2\x47B\x448\x3\x2\x2\x2\x47B\x44B"+
		"\x3\x2\x2\x2\x47B\x44E\x3\x2\x2\x2\x47B\x454\x3\x2\x2\x2\x47B\x457\x3"+
		"\x2\x2\x2\x47B\x45A\x3\x2\x2\x2\x47B\x45D\x3\x2\x2\x2\x47B\x464\x3\x2"+
		"\x2\x2\x47B\x468\x3\x2\x2\x2\x47B\x46B\x3\x2\x2\x2\x47B\x470\x3\x2\x2"+
		"\x2\x47B\x476\x3\x2\x2\x2\x47B\x478\x3\x2\x2\x2\x47C\x47F\x3\x2\x2\x2"+
		"\x47D\x47B\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E\xB1\x3\x2\x2\x2\x47F"+
		"\x47D\x3\x2\x2\x2\x480\x481\a;\x2\x2\x481\x482\x5\xB0Y\x2\x482\x483\a"+
		"<\x2\x2\x483\x496\x3\x2\x2\x2\x484\x496\a-\x2\x2\x485\x496\a*\x2\x2\x486"+
		"\x496\x5h\x35\x2\x487\x496\a\x66\x2\x2\x488\x489\x5N(\x2\x489\x48A\a\x43"+
		"\x2\x2\x48A\x48B\a\v\x2\x2\x48B\x496\x3\x2\x2\x2\x48C\x48D\a\x32\x2\x2"+
		"\x48D\x48E\a\x43\x2\x2\x48E\x496\a\v\x2\x2\x48F\x493\x5\xC0\x61\x2\x490"+
		"\x494\x5\xC8\x65\x2\x491\x492\a-\x2\x2\x492\x494\x5\xCA\x66\x2\x493\x490"+
		"\x3\x2\x2\x2\x493\x491\x3\x2\x2\x2\x494\x496\x3\x2\x2\x2\x495\x480\x3"+
		"\x2\x2\x2\x495\x484\x3\x2\x2\x2\x495\x485\x3\x2\x2\x2\x495\x486\x3\x2"+
		"\x2\x2\x495\x487\x3\x2\x2\x2\x495\x488\x3\x2\x2\x2\x495\x48C\x3\x2\x2"+
		"\x2\x495\x48F\x3\x2\x2\x2\x496\xB3\x3\x2\x2\x2\x497\x498\x5\xC0\x61\x2"+
		"\x498\x499\x5\xB6\\\x2\x499\x49A\x5\xBC_\x2\x49A\x4A1\x3\x2\x2\x2\x49B"+
		"\x49E\x5\xB6\\\x2\x49C\x49F\x5\xBA^\x2\x49D\x49F\x5\xBC_\x2\x49E\x49C"+
		"\x3\x2\x2\x2\x49E\x49D\x3\x2\x2\x2\x49F\x4A1\x3\x2\x2\x2\x4A0\x497\x3"+
		"\x2\x2\x2\x4A0\x49B\x3\x2\x2\x2\x4A1\xB5\x3\x2\x2\x2\x4A2\x4A4\a\x66\x2"+
		"\x2\x4A3\x4A5\x5\xC2\x62\x2\x4A4\x4A3\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2"+
		"\x4A5\x4AD\x3\x2\x2\x2\x4A6\x4A7\a\x43\x2\x2\x4A7\x4A9\a\x66\x2\x2\x4A8"+
		"\x4AA\x5\xC2\x62\x2\x4A9\x4A8\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA\x4AC"+
		"\x3\x2\x2\x2\x4AB\x4A6\x3\x2\x2\x2\x4AC\x4AF\x3\x2\x2\x2\x4AD\x4AB\x3"+
		"\x2\x2\x2\x4AD\x4AE\x3\x2\x2\x2\x4AE\x4B2\x3\x2\x2\x2\x4AF\x4AD\x3\x2"+
		"\x2\x2\x4B0\x4B2\x5R*\x2\x4B1\x4A2\x3\x2\x2\x2\x4B1\x4B0\x3\x2\x2\x2\x4B2"+
		"\xB7\x3\x2\x2\x2\x4B3\x4B5\a\x66\x2\x2\x4B4\x4B6\x5\xC4\x63\x2\x4B5\x4B4"+
		"\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4B8\x5"+
		"\xBC_\x2\x4B8\xB9\x3\x2\x2\x2\x4B9\x4D5\a?\x2\x2\x4BA\x4BF\a@\x2\x2\x4BB"+
		"\x4BC\a?\x2\x2\x4BC\x4BE\a@\x2\x2\x4BD\x4BB\x3\x2\x2\x2\x4BE\x4C1\x3\x2"+
		"\x2\x2\x4BF\x4BD\x3\x2\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C2\x3\x2\x2"+
		"\x2\x4C1\x4BF\x3\x2\x2\x2\x4C2\x4D6\x5J&\x2\x4C3\x4C4\x5\xB0Y\x2\x4C4"+
		"\x4CB\a@\x2\x2\x4C5\x4C6\a?\x2\x2\x4C6\x4C7\x5\xB0Y\x2\x4C7\x4C8\a@\x2"+
		"\x2\x4C8\x4CA\x3\x2\x2\x2\x4C9\x4C5\x3\x2\x2\x2\x4CA\x4CD\x3\x2\x2\x2"+
		"\x4CB\x4C9\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4D2\x3\x2\x2\x2\x4CD"+
		"\x4CB\x3\x2\x2\x2\x4CE\x4CF\a?\x2\x2\x4CF\x4D1\a@\x2\x2\x4D0\x4CE\x3\x2"+
		"\x2\x2\x4D1\x4D4\x3\x2\x2\x2\x4D2\x4D0\x3\x2\x2\x2\x4D2\x4D3\x3\x2\x2"+
		"\x2\x4D3\x4D6\x3\x2\x2\x2\x4D4\x4D2\x3\x2\x2\x2\x4D5\x4BA\x3\x2\x2\x2"+
		"\x4D5\x4C3\x3\x2\x2\x2\x4D6\xBB\x3\x2\x2\x2\x4D7\x4D9\x5\xCA\x66\x2\x4D8"+
		"\x4DA\x5$\x13\x2\x4D9\x4D8\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\xBD"+
		"\x3\x2\x2\x2\x4DB\x4DC\x5\xC0\x61\x2\x4DC\x4DD\x5\xC8\x65\x2\x4DD\xBF"+
		"\x3\x2\x2\x2\x4DE\x4DF\a\x46\x2\x2\x4DF\x4E0\x5\"\x12\x2\x4E0\x4E1\a\x45"+
		"\x2\x2\x4E1\xC1\x3\x2\x2\x2\x4E2\x4E3\a\x46\x2\x2\x4E3\x4E6\a\x45\x2\x2"+
		"\x4E4\x4E6\x5T+\x2\x4E5\x4E2\x3\x2\x2\x2\x4E5\x4E4\x3\x2\x2\x2\x4E6\xC3"+
		"\x3\x2\x2\x2\x4E7\x4E8\a\x46\x2\x2\x4E8\x4EB\a\x45\x2\x2\x4E9\x4EB\x5"+
		"\xC0\x61\x2\x4EA\x4E7\x3\x2\x2\x2\x4EA\x4E9\x3\x2\x2\x2\x4EB\xC5\x3\x2"+
		"\x2\x2\x4EC\x4F3\x5\xCA\x66\x2\x4ED\x4EE\a\x43\x2\x2\x4EE\x4F0\a\x66\x2"+
		"\x2\x4EF\x4F1\x5\xCA\x66\x2\x4F0\x4EF\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2"+
		"\x4F1\x4F3\x3\x2\x2\x2\x4F2\x4EC\x3\x2\x2\x2\x4F2\x4ED\x3\x2\x2\x2\x4F3"+
		"\xC7\x3\x2\x2\x2\x4F4\x4F5\a*\x2\x2\x4F5\x4F9\x5\xC6\x64\x2\x4F6\x4F7"+
		"\a\x66\x2\x2\x4F7\x4F9\x5\xCA\x66\x2\x4F8\x4F4\x3\x2\x2\x2\x4F8\x4F6\x3"+
		"\x2\x2\x2\x4F9\xC9\x3\x2\x2\x2\x4FA\x4FC\a;\x2\x2\x4FB\x4FD\x5\xAAV\x2"+
		"\x4FC\x4FB\x3\x2\x2\x2\x4FC\x4FD\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE"+
		"\x4FF\a<\x2\x2\x4FF\xCB\x3\x2\x2\x2\x97\xCD\xD2\xD8\xE0\xE9\xEE\xF5\xFC"+
		"\x103\x10A\x10F\x113\x117\x11B\x120\x124\x128\x132\x13A\x141\x148\x14C"+
		"\x14F\x152\x15B\x161\x166\x169\x16F\x175\x179\x182\x189\x192\x199\x19F"+
		"\x1A3\x1AE\x1B2\x1BA\x1BF\x1C3\x1CC\x1DA\x1DF\x1E8\x1F0\x1FA\x202\x20A"+
		"\x20F\x21B\x221\x228\x22D\x235\x239\x23B\x246\x24E\x251\x255\x25A\x25E"+
		"\x269\x272\x274\x27B\x280\x289\x28E\x291\x296\x29F\x2AF\x2B9\x2BC\x2C5"+
		"\x2CF\x2D7\x2DA\x2DD\x2EA\x2F2\x2F7\x2FF\x303\x307\x30B\x30D\x311\x317"+
		"\x322\x32A\x332\x33D\x346\x35D\x360\x363\x36B\x36F\x377\x37D\x388\x391"+
		"\x396\x3A0\x3A7\x3B4\x3BD\x3C6\x3CC\x3D7\x3DC\x3E8\x3EC\x3F0\x3F4\x3F6"+
		"\x3FA\x3FF\x412\x426\x436\x461\x473\x47B\x47D\x493\x495\x49E\x4A0\x4A4"+
		"\x4A9\x4AD\x4B1\x4B5\x4BF\x4CB\x4D2\x4D5\x4D9\x4E5\x4EA\x4F0\x4F2\x4F8"+
		"\x4FC";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LangParse2
